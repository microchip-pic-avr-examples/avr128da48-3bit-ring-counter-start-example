
avr128da48-3bit-ring-counter-start-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00804000  00000b62  00000bf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008040b6  008040b6  00000cac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e76  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038eb  00000000  00000000  00007de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014bc  00000000  00000000  0000b6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  0000cb90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005e30  00000000  00000000  0000cf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b4c  00000000  00000000  00012d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00013890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
   8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
   c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_29>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  8c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  90:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  94:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  98:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  9c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  ac:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  bc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  c0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  c4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  c8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  cc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  d0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  d4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  d8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  dc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  e0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  e4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  e8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df e7       	ldi	r29, 0x7F	; 127
  f6:	de bf       	out	0x3e, r29	; 62

000000f8 <__do_copy_data>:
  f8:	10 e4       	ldi	r17, 0x40	; 64
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b0 e4       	ldi	r27, 0x40	; 64
  fe:	e2 e6       	ldi	r30, 0x62	; 98
 100:	fb e0       	ldi	r31, 0x0B	; 11
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0b bf       	out	0x3b, r16	; 59
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
 108:	07 90       	elpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	a6 3b       	cpi	r26, 0xB6	; 182
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
 112:	20 e4       	ldi	r18, 0x40	; 64
 114:	a6 eb       	ldi	r26, 0xB6	; 182
 116:	b0 e4       	ldi	r27, 0x40	; 64
 118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
 11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
 11c:	ae 3b       	cpi	r26, 0xBE	; 190
 11e:	b2 07       	cpc	r27, r18
 120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
 122:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
 126:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <_exit>

0000012a <__bad_interrupt>:
 12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 12e:	0e 94 40 02 	call	0x480	; 0x480 <system_init>
 132:	08 95       	ret

00000134 <__vector_29>:

extern buttonState_t buttonState;


ISR(PORTC_PORT_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
	/* Insert your PORTC interrupt handling code here */

	/* Clear interrupt flags */
	VPORTC_INTFLAGS = (1 << 6) | (1 << 7);
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	8b b9       	out	0x0b, r24	; 11
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
 144:	56 9a       	sbi	0x0a, 6	; 10
	LED_toggle_level();
	buttonState=KEY_PRESSED;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 b7 40 	sts	0x40B7, r24	; 0x8040b7 <buttonState>
}
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <EnableSwitchPress>:
  clock to the flipflops.
  **/
void EnableSwitchPress(void)
{
	//Enables the global interrupt
	ENABLE_INTERRUPTS();
 158:	78 94       	sei
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 15a:	e7 e5       	ldi	r30, 0x57	; 87
 15c:	f4 e0       	ldi	r31, 0x04	; 4
 15e:	80 81       	ld	r24, Z
 160:	88 7f       	andi	r24, 0xF8	; 248
 162:	82 60       	ori	r24, 0x02	; 2
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <DisableSwitchPress>:
  clock to the flipflops.
  **/
void DisableSwitchPress(void)
{
	//Disables the global interrupt
	DISABLE_INTERRUPTS();
 168:	f8 94       	cli
 16a:	e7 e5       	ldi	r30, 0x57	; 87
 16c:	f4 e0       	ldi	r31, 0x04	; 4
 16e:	80 81       	ld	r24, Z
 170:	88 7f       	andi	r24, 0xF8	; 248
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <SendButtonPressInstruction>:
  @Description
  function to send an instruction to the user to press switch,in order to display the three states of the ring counter
  **/
 void SendButtonPressInstruction( pressSwitchInstruction_t displayStringsIndex,const uint8_t *ringcounterstate)
{
	printf ("\n%d. %s %s %s %s",displayStringsIndex,pressSwitchText,toDisplayText,ringcounterstate,ringCounterText);
 176:	22 e6       	ldi	r18, 0x62	; 98
 178:	30 e4       	ldi	r19, 0x40	; 64
 17a:	3f 93       	push	r19
 17c:	2f 93       	push	r18
 17e:	7f 93       	push	r23
 180:	6f 93       	push	r22
 182:	2c e9       	ldi	r18, 0x9C	; 156
 184:	30 e4       	ldi	r19, 0x40	; 64
 186:	3f 93       	push	r19
 188:	2f 93       	push	r18
 18a:	27 ea       	ldi	r18, 0xA7	; 167
 18c:	30 e4       	ldi	r19, 0x40	; 64
 18e:	3f 93       	push	r19
 190:	2f 93       	push	r18
 192:	1f 92       	push	r1
 194:	8f 93       	push	r24
 196:	8e e0       	ldi	r24, 0x0E	; 14
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	9f 93       	push	r25
 19c:	8f 93       	push	r24
 19e:	0e 94 b7 02 	call	0x56e	; 0x56e <printf>
}
 1a2:	8d b7       	in	r24, 0x3d	; 61
 1a4:	9e b7       	in	r25, 0x3e	; 62
 1a6:	0c 96       	adiw	r24, 0x0c	; 12
 1a8:	8d bf       	out	0x3d, r24	; 61
 1aa:	9e bf       	out	0x3e, r25	; 62
 1ac:	08 95       	ret

000001ae <FlipflopOutputRead>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
 1ae:	82 b1       	in	r24, 0x02	; 2
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
 1b0:	9e b1       	in	r25, 0x0e	; 14
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
 1b2:	26 b1       	in	r18, 0x06	; 6
	//Read Second FlipFlop output
	ff2Output=PORTD_get_pin_level(3);
	//Read Third FlipFlop output
	ff3Output=PORTB_get_pin_level(3);
	//Print all three FlipFlop's output on terminal window
	printf("%d %d %d\n",ff1Output,ff2Output,ff3Output);
 1b4:	23 fb       	bst	r18, 3
 1b6:	22 27       	eor	r18, r18
 1b8:	20 f9       	bld	r18, 0
 1ba:	1f 92       	push	r1
 1bc:	2f 93       	push	r18
 1be:	93 fb       	bst	r25, 3
 1c0:	99 27       	eor	r25, r25
 1c2:	90 f9       	bld	r25, 0
 1c4:	1f 92       	push	r1
 1c6:	9f 93       	push	r25
 1c8:	83 fb       	bst	r24, 3
 1ca:	88 27       	eor	r24, r24
 1cc:	80 f9       	bld	r24, 0
 1ce:	1f 92       	push	r1
 1d0:	8f 93       	push	r24
 1d2:	8f e1       	ldi	r24, 0x1F	; 31
 1d4:	90 e4       	ldi	r25, 0x40	; 64
 1d6:	9f 93       	push	r25
 1d8:	8f 93       	push	r24
 1da:	0e 94 b7 02 	call	0x56e	; 0x56e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	84 e3       	ldi	r24, 0x34	; 52
 1e2:	9c e0       	ldi	r25, 0x0C	; 12
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <FlipflopOutputRead+0x36>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <FlipflopOutputRead+0x40>
 1ee:	00 00       	nop
	//delay is given to avoid the text display on terminal window back-to-back continously 
    _delay_ms(ONE_SEC);
}
 1f0:	8d b7       	in	r24, 0x3d	; 61
 1f2:	9e b7       	in	r25, 0x3e	; 62
 1f4:	08 96       	adiw	r24, 0x08	; 8
 1f6:	8d bf       	out	0x3d, r24	; 61
 1f8:	9e bf       	out	0x3e, r25	; 62
 1fa:	08 95       	ret

000001fc <main>:


int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 1fc:	0e 94 97 00 	call	0x12e	; 0x12e <atmel_start_init>
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	84 e3       	ldi	r24, 0x34	; 52
 204:	9c e0       	ldi	r25, 0x0C	; 12
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 210:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 212:	4f 9a       	sbi	0x09, 7	; 9
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	84 e3       	ldi	r24, 0x34	; 52
 218:	9c e0       	ldi	r25, 0x0C	; 12
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 224:	00 00       	nop
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	84 e3       	ldi	r24, 0x34	; 52
 22a:	9c e0       	ldi	r25, 0x0C	; 12
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 234:	00 c0       	rjmp	.+0      	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 236:	00 00       	nop
  After reading the first flipflop output and if the output is equal to one, then send Low signal to the first flipflop
  This function sends Low signal to the flipflop.
 **/
void SendLowSignal(void)
{
	if(PORTA_get_pin_level(3)==1)
 238:	13 9b       	sbis	0x02, 3	; 2
 23a:	02 c0       	rjmp	.+4      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 23c:	09 98       	cbi	0x01, 1	; 1
 23e:	04 c0       	rjmp	.+8      	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		// <true"> High
		false);
			}
	else
	{
		printf("Error\n");
 240:	89 e2       	ldi	r24, 0x29	; 41
 242:	90 e4       	ldi	r25, 0x40	; 64
 244:	0e 94 cb 02 	call	0x596	; 0x596 <puts>
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	84 e3       	ldi	r24, 0x34	; 52
 24c:	9c e0       	ldi	r25, 0x0C	; 12
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
 258:	00 00       	nop
	 _delay_ms(ONE_SEC);
	 //setting the input pin PA1 to low, after reading first flipflop output.
	  SendLowSignal();
	  _delay_ms(ONE_SEC);
	  //first string to display on terminal window, when MCU is loaded with firmware
	  printf("%s",applicationStartedText);
 25a:	8f e2       	ldi	r24, 0x2F	; 47
 25c:	90 e4       	ldi	r25, 0x40	; 64
 25e:	0e 94 cb 02 	call	0x596	; 0x596 <puts>
	  //Sends press switch instruction to the user on terminal window.
	  SendButtonPressInstruction(FIRST_STATE_INS_TEXT,firstStateText);
 262:	60 e9       	ldi	r22, 0x90	; 144
 264:	70 e4       	ldi	r23, 0x40	; 64
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 bb 00 	call	0x176	; 0x176 <SendButtonPressInstruction>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 26c:	47 98       	cbi	0x08, 7	; 8
			EnableSwitchPress();
			ringCounterState=WAIT_FOR_SWITCH_PRESS1;
			break;
		case SECOND_STATE_OF_RNG_COUNTER:
			DisableSwitchPress();
			printf("\t\t%s=",secondStateText);
 26e:	03 e8       	ldi	r16, 0x83	; 131
 270:	10 e4       	ldi	r17, 0x40	; 64
 272:	cc e5       	ldi	r28, 0x5C	; 92
 274:	d0 e4       	ldi	r29, 0x40	; 64
			FlipflopOutputRead();
			SendButtonPressInstruction(THIRD_STATE_INS_TEXT,thirdStateText);
			EnableSwitchPress();
			ringCounterState=WAIT_FOR_SWITCH_PRESS2;
 276:	68 94       	set
 278:	ff 24       	eor	r15, r15
 27a:	f2 f8       	bld	r15, 2
  clock to the flipflops.
  *
 **/
void RingCounterState(void)
{
	switch(ringCounterState)
 27c:	80 91 b6 40 	lds	r24, 0x40B6	; 0x8040b6 <__data_end>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	61 f0       	breq	.+24     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 284:	28 f4       	brcc	.+10     	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
 286:	88 23       	and	r24, r24
 288:	49 f0       	breq	.+18     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	91 f0       	breq	.+36     	; 0x2b2 <__EEPROM_REGION_LENGTH__+0xb2>
 28e:	f8 cf       	rjmp	.-16     	; 0x280 <__EEPROM_REGION_LENGTH__+0x80>
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	21 f0       	breq	.+8      	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 294:	40 f1       	brcs	.+80     	; 0x2e6 <__EEPROM_REGION_LENGTH__+0xe6>
 296:	85 30       	cpi	r24, 0x05	; 5
 298:	f1 f1       	breq	.+124    	; 0x316 <__EEPROM_REGION_LENGTH__+0x116>
 29a:	f2 cf       	rjmp	.-28     	; 0x280 <__EEPROM_REGION_LENGTH__+0x80>
	{
		case WAIT_FOR_SWITCH_PRESS0:
		case WAIT_FOR_SWITCH_PRESS1:
		case WAIT_FOR_SWITCH_PRESS2:
			if(buttonState==KEY_PRESSED)
 29c:	90 91 b7 40 	lds	r25, 0x40B7	; 0x8040b7 <buttonState>
 2a0:	91 30       	cpi	r25, 0x01	; 1
 2a2:	61 f7       	brne	.-40     	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
			{
				ringCounterState=ringCounterState+1;
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 b6 40 	sts	0x40B6, r24	; 0x8040b6 <__data_end>
				buttonState=KEY_RELEASED;
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	80 93 b7 40 	sts	0x40B7, r24	; 0x8040b7 <buttonState>
 2b0:	e5 cf       	rjmp	.-54     	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
			}
			break;
		case FIRST_STATE_OF_RNG_COUNTER:
			DisableSwitchPress();
 2b2:	0e 94 b4 00 	call	0x168	; 0x168 <DisableSwitchPress>
			printf("\t\t%s=",firstStateText);
 2b6:	80 e9       	ldi	r24, 0x90	; 144
 2b8:	90 e4       	ldi	r25, 0x40	; 64
 2ba:	9f 93       	push	r25
 2bc:	8f 93       	push	r24
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	0e 94 b7 02 	call	0x56e	; 0x56e <printf>
			FlipflopOutputRead();
 2c6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <FlipflopOutputRead>
			SendButtonPressInstruction(SECOND_STATE_INS_TEXT,secondStateText);
 2ca:	b8 01       	movw	r22, r16
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 bb 00 	call	0x176	; 0x176 <SendButtonPressInstruction>
			EnableSwitchPress();
 2d2:	0e 94 ac 00 	call	0x158	; 0x158 <EnableSwitchPress>
			ringCounterState=WAIT_FOR_SWITCH_PRESS1;
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	80 93 b6 40 	sts	0x40B6, r24	; 0x8040b6 <__data_end>
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	cb cf       	rjmp	.-106    	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
			break;
		case SECOND_STATE_OF_RNG_COUNTER:
			DisableSwitchPress();
 2e6:	0e 94 b4 00 	call	0x168	; 0x168 <DisableSwitchPress>
			printf("\t\t%s=",secondStateText);
 2ea:	1f 93       	push	r17
 2ec:	0f 93       	push	r16
 2ee:	df 93       	push	r29
 2f0:	cf 93       	push	r28
 2f2:	0e 94 b7 02 	call	0x56e	; 0x56e <printf>
			FlipflopOutputRead();
 2f6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <FlipflopOutputRead>
			SendButtonPressInstruction(THIRD_STATE_INS_TEXT,thirdStateText);
 2fa:	67 e7       	ldi	r22, 0x77	; 119
 2fc:	70 e4       	ldi	r23, 0x40	; 64
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	0e 94 bb 00 	call	0x176	; 0x176 <SendButtonPressInstruction>
			EnableSwitchPress();
 304:	0e 94 ac 00 	call	0x158	; 0x158 <EnableSwitchPress>
			ringCounterState=WAIT_FOR_SWITCH_PRESS2;
 308:	f0 92 b6 40 	sts	0x40B6, r15	; 0x8040b6 <__data_end>
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	b3 cf       	rjmp	.-154    	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
			break;
		case THIRD_STATE_OF_RNG_COUNTER:
			DisableSwitchPress();
 316:	0e 94 b4 00 	call	0x168	; 0x168 <DisableSwitchPress>
			printf("\t\t%s=",thirdStateText);
 31a:	87 e7       	ldi	r24, 0x77	; 119
 31c:	90 e4       	ldi	r25, 0x40	; 64
 31e:	9f 93       	push	r25
 320:	8f 93       	push	r24
 322:	df 93       	push	r29
 324:	cf 93       	push	r28
 326:	0e 94 b7 02 	call	0x56e	; 0x56e <printf>
			FlipflopOutputRead();
 32a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <FlipflopOutputRead>
			SendButtonPressInstruction(FIRST_STATE_INS_TEXT,firstStateText);
 32e:	60 e9       	ldi	r22, 0x90	; 144
 330:	70 e4       	ldi	r23, 0x40	; 64
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 bb 00 	call	0x176	; 0x176 <SendButtonPressInstruction>
			EnableSwitchPress();
 338:	0e 94 ac 00 	call	0x158	; 0x158 <EnableSwitchPress>
			ringCounterState=WAIT_FOR_SWITCH_PRESS0;
 33c:	10 92 b6 40 	sts	0x40B6, r1	; 0x8040b6 <__data_end>
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	99 cf       	rjmp	.-206    	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>

0000034a <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 34a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret

00000352 <DIGITAL_GLUE_LOGIC_0_init>:
 * \return Return value 0 if success
 */
int8_t DIGITAL_GLUE_LOGIC_0_init()
{

	CCL.SEQCTRL0 = CCL_SEQSEL0_DFF_gc; /* D FlipFlop */
 352:	e0 ec       	ldi	r30, 0xC0	; 192
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	81 83       	std	Z+1, r24	; 0x01

	CCL.SEQCTRL1 = CCL_SEQSEL1_DFF_gc; /* D FlipFlop */
 35a:	82 83       	std	Z+2, r24	; 0x02

	CCL.SEQCTRL2 = CCL_SEQSEL2_DFF_gc; /* D FlipFlop */
 35c:	83 83       	std	Z+3, r24	; 0x03

	CCL.TRUTH0 = 238; /* Truth 0: 238 */
 35e:	9e ee       	ldi	r25, 0xEE	; 238
 360:	93 87       	std	Z+11, r25	; 0x0b

	CCL.LUT0CTRLC = CCL_INSEL2_EVENTA_gc; /* Event input source A */
 362:	93 e0       	ldi	r25, 0x03	; 3
 364:	92 87       	std	Z+10, r25	; 0x0a

	CCL.LUT0CTRLB = CCL_INSEL0_EVENTB_gc /* Event input source B */
 366:	24 e5       	ldi	r18, 0x54	; 84
 368:	21 87       	std	Z+9, r18	; 0x09
	                | CCL_INSEL1_IO_gc;  /* IO pin LUTn-N1 input source */

	CCL.LUT0CTRLA = CCL_CLKSRC_IN2_gc        /* IN[2] is clocking the LUT */
 36a:	33 e4       	ldi	r19, 0x43	; 67
 36c:	30 87       	std	Z+8, r19	; 0x08
	                | CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.TRUTH1 = 16; /* Truth 1: 16 */
 36e:	20 e1       	ldi	r18, 0x10	; 16
 370:	27 87       	std	Z+15, r18	; 0x0f

	CCL.LUT1CTRLC = CCL_INSEL2_IO_gc; /* IO pin LUTn-IN2 input source */
 372:	65 e0       	ldi	r22, 0x05	; 5
 374:	66 87       	std	Z+14, r22	; 0x0e

	// CCL.LUT1CTRLB = CCL_INSEL0_MASK_gc /* Masked input */
	//		 | CCL_INSEL1_MASK_gc; /* Masked input */

	CCL.LUT1CTRLA = CCL_CLKSRC_CLKPER_gc     /* CLK_PER is clocking the LUT */
 376:	84 87       	std	Z+12, r24	; 0x0c
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 0 << CCL_OUTEN_bp;     /* Output Enable: disabled */

	CCL.TRUTH2 = 204; /* Truth 2: 204 */
 378:	5c ec       	ldi	r21, 0xCC	; 204
 37a:	53 8b       	std	Z+19, r21	; 0x13

	CCL.LUT2CTRLC = CCL_INSEL2_EVENTA_gc; /* Event input source A */
 37c:	92 8b       	std	Z+18, r25	; 0x12

	CCL.LUT2CTRLB = CCL_INSEL0_MASK_gc      /* Masked input */
 37e:	40 e4       	ldi	r20, 0x40	; 64
 380:	41 8b       	std	Z+17, r20	; 0x11
	                | CCL_INSEL1_EVENTB_gc; /* Event input source B */

	CCL.LUT2CTRLA = CCL_CLKSRC_IN2_gc        /* IN[2] is clocking the LUT */
 382:	30 8b       	std	Z+16, r19	; 0x10
	                | CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.TRUTH3 = 16; /* Truth 3: 16 */
 384:	27 8b       	std	Z+23, r18	; 0x17

	CCL.LUT3CTRLC = CCL_INSEL2_IO_gc; /* IO pin LUTn-IN2 input source */
 386:	66 8b       	std	Z+22, r22	; 0x16

	// CCL.LUT3CTRLB = CCL_INSEL0_MASK_gc /* Masked input */
	//		 | CCL_INSEL1_MASK_gc; /* Masked input */

	 CCL.LUT3CTRLA = CCL_CLKSRC_CLKPER_gc /* CLK_PER is clocking the LUT */
 388:	84 8b       	std	Z+20, r24	; 0x14
			 | CCL_EDGEDET_DIS_gc /* Edge detector is disabled */
	    	 | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
		     | 1 << CCL_ENABLE_bp
		     | 0 << CCL_OUTEN_bp; /* Output Enable: disabled */

	CCL.TRUTH4 = 204; /* Truth 4: 204 */
 38a:	53 8f       	std	Z+27, r21	; 0x1b

	CCL.LUT4CTRLC = CCL_INSEL2_EVENTA_gc; /* Event input source A */
 38c:	92 8f       	std	Z+26, r25	; 0x1a

	CCL.LUT4CTRLB = CCL_INSEL0_MASK_gc      /* Masked input */
 38e:	41 8f       	std	Z+25, r20	; 0x19
	                | CCL_INSEL1_EVENTB_gc; /* Event input source B */

	CCL.LUT4CTRLA = CCL_CLKSRC_IN2_gc        /* IN[2] is clocking the LUT */
 390:	30 8f       	std	Z+24, r19	; 0x18
	                | CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.TRUTH5 = 16; /* Truth 5: 16 */
 392:	27 8f       	std	Z+31, r18	; 0x1f

	CCL.LUT5CTRLC = CCL_INSEL2_EVENTA_gc; /* Event input source A */
 394:	96 8f       	std	Z+30, r25	; 0x1e

	// CCL.LUT5CTRLB = CCL_INSEL0_MASK_gc /* Masked input */
	//		 | CCL_INSEL1_MASK_gc; /* Masked input */

	CCL.LUT5CTRLA = CCL_CLKSRC_CLKPER_gc     /* CLK_PER is clocking the LUT */
 396:	84 8f       	std	Z+28, r24	; 0x1c
	                | CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 0 << CCL_OUTEN_bp;     /* Output Enable: disabled */

	CCL.CTRLA = 1 << CCL_ENABLE_bp      /* Enable: enabled */
 398:	80 83       	st	Z, r24

	// CCL.INTCTRL1 = CCL_INTMODE4_BOTH_gc /* Sense both edges */
	//		 | CCL_INTMODE5_BOTH_gc; /* Sense both edges */

	return 0;
}
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret

0000039e <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	08 95       	ret

000003a2 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 3a2:	78 94       	sei

	return 0;
}
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret

000003a8 <mcu_init>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 3a8:	e0 e1       	ldi	r30, 0x10	; 16
 3aa:	f4 e0       	ldi	r31, 0x04	; 4
 3ac:	80 81       	ld	r24, Z
 3ae:	88 60       	ori	r24, 0x08	; 8
 3b0:	81 93       	st	Z+, r24
 3b2:	e8 31       	cpi	r30, 0x18	; 24
 3b4:	84 e0       	ldi	r24, 0x04	; 4
 3b6:	f8 07       	cpc	r31, r24
 3b8:	c9 f7       	brne	.-14     	; 0x3ac <mcu_init+0x4>
 3ba:	e0 e3       	ldi	r30, 0x30	; 48
 3bc:	f4 e0       	ldi	r31, 0x04	; 4
 3be:	80 81       	ld	r24, Z
 3c0:	88 60       	ori	r24, 0x08	; 8
 3c2:	81 93       	st	Z+, r24
 3c4:	e8 33       	cpi	r30, 0x38	; 56
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	f8 07       	cpc	r31, r24
 3ca:	c9 f7       	brne	.-14     	; 0x3be <mcu_init+0x16>
 3cc:	e0 e5       	ldi	r30, 0x50	; 80
 3ce:	f4 e0       	ldi	r31, 0x04	; 4
 3d0:	80 81       	ld	r24, Z
 3d2:	88 60       	ori	r24, 0x08	; 8
 3d4:	81 93       	st	Z+, r24
 3d6:	e8 35       	cpi	r30, 0x58	; 88
 3d8:	84 e0       	ldi	r24, 0x04	; 4
 3da:	f8 07       	cpc	r31, r24
 3dc:	c9 f7       	brne	.-14     	; 0x3d0 <mcu_init+0x28>
 3de:	e0 e7       	ldi	r30, 0x70	; 112
 3e0:	f4 e0       	ldi	r31, 0x04	; 4
 3e2:	80 81       	ld	r24, Z
 3e4:	88 60       	ori	r24, 0x08	; 8
 3e6:	81 93       	st	Z+, r24
 3e8:	e8 37       	cpi	r30, 0x78	; 120
 3ea:	84 e0       	ldi	r24, 0x04	; 4
 3ec:	f8 07       	cpc	r31, r24
 3ee:	c9 f7       	brne	.-14     	; 0x3e2 <mcu_init+0x3a>
 3f0:	e0 e9       	ldi	r30, 0x90	; 144
 3f2:	f4 e0       	ldi	r31, 0x04	; 4
 3f4:	80 81       	ld	r24, Z
 3f6:	88 60       	ori	r24, 0x08	; 8
 3f8:	81 93       	st	Z+, r24
 3fa:	e8 39       	cpi	r30, 0x98	; 152
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	f8 07       	cpc	r31, r24
 400:	c9 f7       	brne	.-14     	; 0x3f4 <mcu_init+0x4c>
 402:	e0 eb       	ldi	r30, 0xB0	; 176
 404:	f4 e0       	ldi	r31, 0x04	; 4
 406:	80 81       	ld	r24, Z
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	81 93       	st	Z+, r24
 40c:	e8 3b       	cpi	r30, 0xB8	; 184
 40e:	84 e0       	ldi	r24, 0x04	; 4
 410:	f8 07       	cpc	r31, r24
 412:	c9 f7       	brne	.-14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 414:	e0 ed       	ldi	r30, 0xD0	; 208
 416:	f4 e0       	ldi	r31, 0x04	; 4
 418:	80 81       	ld	r24, Z
 41a:	88 60       	ori	r24, 0x08	; 8
 41c:	81 93       	st	Z+, r24
 41e:	e8 3d       	cpi	r30, 0xD8	; 216
 420:	84 e0       	ldi	r24, 0x04	; 4
 422:	f8 07       	cpc	r31, r24
 424:	c9 f7       	brne	.-14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 426:	08 95       	ret

00000428 <USART_0_initialization>:
 428:	41 98       	cbi	0x08, 1	; 8
 42a:	e1 e5       	ldi	r30, 0x51	; 81
 42c:	f4 e0       	ldi	r31, 0x04	; 4
 42e:	80 81       	ld	r24, Z
 430:	87 7f       	andi	r24, 0xF7	; 247
 432:	80 83       	st	Z, r24
 434:	40 9a       	sbi	0x08, 0	; 8
 436:	48 98       	cbi	0x09, 0	; 9
 438:	0e 94 9a 02 	call	0x534	; 0x534 <USART_0_init>
 43c:	08 95       	ret

0000043e <TIMER_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 43e:	24 9a       	sbi	0x04, 4	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 440:	2c 98       	cbi	0x05, 4	; 5
	    // <true"> High
	    false);

	/* set the alternate pin mux */

	PORTMUX.TCBROUTEA |= PORTMUX_TCB2_bm;
 442:	e0 ee       	ldi	r30, 0xE0	; 224
 444:	f5 e0       	ldi	r31, 0x05	; 5
 446:	87 81       	ldd	r24, Z+7	; 0x07
 448:	84 60       	ori	r24, 0x04	; 4
 44a:	87 83       	std	Z+7, r24	; 0x07

	TIMER_0_init();
 44c:	0e 94 8a 02 	call	0x514	; 0x514 <TIMER_0_init>
 450:	08 95       	ret

00000452 <DIGITAL_GLUE_LOGIC_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 452:	01 9a       	sbi	0x00, 1	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
 454:	09 9a       	sbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 456:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 458:	0b 98       	cbi	0x01, 3	; 1
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 45a:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 45c:	e2 e5       	ldi	r30, 0x52	; 82
 45e:	f4 e0       	ldi	r31, 0x04	; 4
 460:	80 81       	ld	r24, Z
 462:	88 60       	ori	r24, 0x08	; 8
 464:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 466:	63 9a       	sbi	0x0c, 3	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 468:	6b 98       	cbi	0x0d, 3	; 13
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
 46a:	a2 98       	cbi	0x14, 2	; 20
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 46c:	e2 eb       	ldi	r30, 0xB2	; 178
 46e:	f4 e0       	ldi	r31, 0x04	; 4
 470:	80 81       	ld	r24, Z
 472:	88 60       	ori	r24, 0x08	; 8
 474:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 476:	23 9a       	sbi	0x04, 3	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 478:	2b 98       	cbi	0x05, 3	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	DIGITAL_GLUE_LOGIC_0_init();
 47a:	0e 94 a9 01 	call	0x352	; 0x352 <DIGITAL_GLUE_LOGIC_0_init>
 47e:	08 95       	ret

00000480 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 480:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 484:	02 98       	cbi	0x00, 2	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 486:	e2 e1       	ldi	r30, 0x12	; 18
 488:	f4 e0       	ldi	r31, 0x04	; 4
 48a:	80 81       	ld	r24, Z
 48c:	88 60       	ori	r24, 0x08	; 8
 48e:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 490:	46 9a       	sbi	0x08, 6	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 492:	4e 98       	cbi	0x09, 6	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 494:	47 9a       	sbi	0x08, 7	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 496:	4f 98       	cbi	0x09, 7	; 9
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 498:	e7 e5       	ldi	r30, 0x57	; 87
 49a:	f4 e0       	ldi	r31, 0x04	; 4
 49c:	80 81       	ld	r24, Z
 49e:	88 60       	ori	r24, 0x08	; 8
 4a0:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
 4a2:	80 81       	ld	r24, Z
 4a4:	8f 77       	andi	r24, 0x7F	; 127
 4a6:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 4a8:	80 81       	ld	r24, Z
 4aa:	88 7f       	andi	r24, 0xF8	; 248
 4ac:	82 60       	ori	r24, 0x02	; 2
 4ae:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_RISING_gc);

	CLKCTRL_init();
 4b0:	0e 94 cf 01 	call	0x39e	; 0x39e <CLKCTRL_init>

	USART_0_initialization();
 4b4:	0e 94 14 02 	call	0x428	; 0x428 <USART_0_initialization>
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 4b8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <EVENT_SYSTEM_0_init>

	USART_0_initialization();

	EVENT_SYSTEM_0_initialization();

	SLPCTRL_init();
 4bc:	0e 94 88 02 	call	0x510	; 0x510 <SLPCTRL_init>

	CPUINT_init();
 4c0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <CPUINT_init>

	BOD_init();
 4c4:	0e 94 a5 01 	call	0x34a	; 0x34a <BOD_init>

	TIMER_0_initialization();
 4c8:	0e 94 1f 02 	call	0x43e	; 0x43e <TIMER_0_initialization>

	DIGITAL_GLUE_LOGIC_0_initialization();
 4cc:	0e 94 29 02 	call	0x452	; 0x452 <DIGITAL_GLUE_LOGIC_0_initialization>
 4d0:	08 95       	ret

000004d2 <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_PORTA_PIN2_gc; /* Port A Pin 2 */
 4d2:	e0 e0       	ldi	r30, 0x00	; 0
 4d4:	f2 e0       	ldi	r31, 0x02	; 2
 4d6:	82 e4       	ldi	r24, 0x42	; 66
 4d8:	80 8b       	std	Z+16, r24	; 0x10

	// EVSYS.CHANNEL1 = EVSYS_CHANNEL1_OFF_gc; /* Off */

	EVSYS.CHANNEL2 = EVSYS_CHANNEL2_PORTC_PIN7_gc; /* Port C Pin 7 */
 4da:	87 e4       	ldi	r24, 0x47	; 71
 4dc:	82 8b       	std	Z+18, r24	; 0x12

	EVSYS.CHANNEL3 = EVSYS_CHANNEL3_TCB2_CAPT_gc; /* Timer/Counter B2 capture */
 4de:	84 ea       	ldi	r24, 0xA4	; 164
 4e0:	83 8b       	std	Z+19, r24	; 0x13

	EVSYS.CHANNEL4 = EVSYS_CHANNEL4_CCL_LUT0_gc; /* Configurable Custom Logic LUT0 */
 4e2:	80 e1       	ldi	r24, 0x10	; 16
 4e4:	84 8b       	std	Z+20, r24	; 0x14

	EVSYS.CHANNEL5 = EVSYS_CHANNEL5_CCL_LUT2_gc; /* Configurable Custom Logic LUT2 */
 4e6:	82 e1       	ldi	r24, 0x12	; 18
 4e8:	85 8b       	std	Z+21, r24	; 0x15

	EVSYS.CHANNEL6 = EVSYS_CHANNEL6_CCL_LUT4_gc; /* Configurable Custom Logic LUT4 */
 4ea:	84 e1       	ldi	r24, 0x14	; 20
 4ec:	86 8b       	std	Z+22, r24	; 0x16

	// EVSYS.CHANNEL8 = EVSYS_CHANNEL8_OFF_gc; /* Off */

	// EVSYS.CHANNEL9 = EVSYS_CHANNEL9_OFF_gc; /* Off */

	EVSYS.USERCCLLUT0A = EVSYS_USER_CHANNEL3_gc; /* Connect user to event channel 3 */
 4ee:	84 e0       	ldi	r24, 0x04	; 4
 4f0:	80 a3       	std	Z+32, r24	; 0x20

	// EVSYS.USERCCLLUT1A = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERCCLLUT2A = EVSYS_USER_CHANNEL3_gc; /* Connect user to event channel 3 */
 4f2:	84 a3       	std	Z+36, r24	; 0x24

	// EVSYS.USERCCLLUT3A = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERCCLLUT4A = EVSYS_USER_CHANNEL3_gc; /* Connect user to event channel 3 */
 4f4:	80 a7       	std	Z+40, r24	; 0x28

	EVSYS.USERCCLLUT5A = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	82 a7       	std	Z+42, r24	; 0x2a

	EVSYS.USERCCLLUT0B = EVSYS_USER_CHANNEL6_gc; /* Connect user to event channel 6 */
 4fa:	87 e0       	ldi	r24, 0x07	; 7
 4fc:	81 a3       	std	Z+33, r24	; 0x21

	// EVSYS.USERCCLLUT1B = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERCCLLUT2B = EVSYS_USER_CHANNEL4_gc; /* Connect user to event channel 4 */
 4fe:	85 e0       	ldi	r24, 0x05	; 5
 500:	85 a3       	std	Z+37, r24	; 0x25

	// EVSYS.USERCCLLUT3B = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERCCLLUT4B = EVSYS_USER_CHANNEL5_gc; /* Connect user to event channel 5 */
 502:	86 e0       	ldi	r24, 0x06	; 6
 504:	81 a7       	std	Z+41, r24	; 0x29

	// EVSYS.USERTCB1CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB1COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB2CAPT = EVSYS_USER_CHANNEL2_gc; /* Connect user to event channel 2 */
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <__TEXT_REGION_LENGTH__+0x7e0243>
	// EVSYS.USERTCD0INPUTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCD0INPUTB = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	08 95       	ret

00000510 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret

00000514 <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCB2.CCMP = 0xfff; /* Compare or Capture: 0xfff */
 514:	e0 e2       	ldi	r30, 0x20	; 32
 516:	fb e0       	ldi	r31, 0x0B	; 11
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	9f e0       	ldi	r25, 0x0F	; 15
 51c:	84 87       	std	Z+12, r24	; 0x0c
 51e:	95 87       	std	Z+13, r25	; 0x0d

	 TCB2.CNT = 0x0; /* Count: 0x0 */
 520:	12 86       	std	Z+10, r1	; 0x0a
 522:	13 86       	std	Z+11, r1	; 0x0b

	TCB2.CTRLB = 0 << TCB_ASYNC_bp        /* Asynchronous Enable: disabled */
 524:	86 e1       	ldi	r24, 0x16	; 22
 526:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPINIT_bp   /* Pin Initial State: disabled */
	             | TCB_CNTMODE_SINGLE_gc; /* Single Shot */

	// TCB2.DBGCTRL = 0 << TCB_DBGRUN_bp; /* Debug Run: disabled */

	TCB2.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	// TCB2.INTCTRL = 0 << TCB_CAPT_bp /* Capture or Timeout: disabled */
	//		 | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB2.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER/2 (From Prescaler) */
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	08 95       	ret

00000534 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART1.STATUS & USART_RXCIF_bm))
		;
	return USART1.RXDATAL;
}
 534:	e0 e2       	ldi	r30, 0x20	; 32
 536:	f8 e0       	ldi	r31, 0x08	; 8
 538:	83 e8       	ldi	r24, 0x83	; 131
 53a:	96 e0       	ldi	r25, 0x06	; 6
 53c:	80 87       	std	Z+8, r24	; 0x08
 53e:	91 87       	std	Z+9, r25	; 0x09
 540:	80 ec       	ldi	r24, 0xC0	; 192
 542:	86 83       	std	Z+6, r24	; 0x06
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e4       	ldi	r25, 0x40	; 64
 548:	80 93 ba 40 	sts	0x40BA, r24	; 0x8040ba <__iob+0x2>
 54c:	90 93 bb 40 	sts	0x40BB, r25	; 0x8040bb <__iob+0x3>
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	08 95       	ret

00000554 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART1.STATUS & USART_DREIF_bm))
 554:	e0 e2       	ldi	r30, 0x20	; 32
 556:	f8 e0       	ldi	r31, 0x08	; 8
 558:	94 81       	ldd	r25, Z+4	; 0x04
 55a:	95 ff       	sbrs	r25, 5
 55c:	fd cf       	rjmp	.-6      	; 0x558 <USART_0_write+0x4>
		;
	USART1.TXDATAL = data;
 55e:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
 562:	08 95       	ret

00000564 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 564:	0e 94 aa 02 	call	0x554	; 0x554 <USART_0_write>
	return 0;
}
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	08 95       	ret

0000056e <printf>:
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	ae 01       	movw	r20, r28
 578:	4b 5f       	subi	r20, 0xFB	; 251
 57a:	5f 4f       	sbci	r21, 0xFF	; 255
 57c:	fa 01       	movw	r30, r20
 57e:	61 91       	ld	r22, Z+
 580:	71 91       	ld	r23, Z+
 582:	af 01       	movw	r20, r30
 584:	80 91 ba 40 	lds	r24, 0x40BA	; 0x8040ba <__iob+0x2>
 588:	90 91 bb 40 	lds	r25, 0x40BB	; 0x8040bb <__iob+0x3>
 58c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <vfprintf>
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <puts>:
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	e0 91 ba 40 	lds	r30, 0x40BA	; 0x8040ba <__iob+0x2>
 5a2:	f0 91 bb 40 	lds	r31, 0x40BB	; 0x8040bb <__iob+0x3>
 5a6:	23 81       	ldd	r18, Z+3	; 0x03
 5a8:	21 ff       	sbrs	r18, 1
 5aa:	1b c0       	rjmp	.+54     	; 0x5e2 <puts+0x4c>
 5ac:	8c 01       	movw	r16, r24
 5ae:	d0 e0       	ldi	r29, 0x00	; 0
 5b0:	c0 e0       	ldi	r28, 0x00	; 0
 5b2:	f8 01       	movw	r30, r16
 5b4:	81 91       	ld	r24, Z+
 5b6:	8f 01       	movw	r16, r30
 5b8:	60 91 ba 40 	lds	r22, 0x40BA	; 0x8040ba <__iob+0x2>
 5bc:	70 91 bb 40 	lds	r23, 0x40BB	; 0x8040bb <__iob+0x3>
 5c0:	db 01       	movw	r26, r22
 5c2:	18 96       	adiw	r26, 0x08	; 8
 5c4:	ed 91       	ld	r30, X+
 5c6:	fc 91       	ld	r31, X
 5c8:	19 97       	sbiw	r26, 0x09	; 9
 5ca:	88 23       	and	r24, r24
 5cc:	31 f0       	breq	.+12     	; 0x5da <puts+0x44>
 5ce:	09 95       	icall
 5d0:	89 2b       	or	r24, r25
 5d2:	79 f3       	breq	.-34     	; 0x5b2 <puts+0x1c>
 5d4:	df ef       	ldi	r29, 0xFF	; 255
 5d6:	cf ef       	ldi	r28, 0xFF	; 255
 5d8:	ec cf       	rjmp	.-40     	; 0x5b2 <puts+0x1c>
 5da:	8a e0       	ldi	r24, 0x0A	; 10
 5dc:	09 95       	icall
 5de:	89 2b       	or	r24, r25
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <puts+0x52>
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	9f ef       	ldi	r25, 0xFF	; 255
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <puts+0x56>
 5e8:	8d 2f       	mov	r24, r29
 5ea:	9c 2f       	mov	r25, r28
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	08 95       	ret

000005f6 <vfprintf>:
 5f6:	2f 92       	push	r2
 5f8:	3f 92       	push	r3
 5fa:	4f 92       	push	r4
 5fc:	5f 92       	push	r5
 5fe:	6f 92       	push	r6
 600:	7f 92       	push	r7
 602:	8f 92       	push	r8
 604:	9f 92       	push	r9
 606:	af 92       	push	r10
 608:	bf 92       	push	r11
 60a:	cf 92       	push	r12
 60c:	df 92       	push	r13
 60e:	ef 92       	push	r14
 610:	ff 92       	push	r15
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	2b 97       	sbiw	r28, 0x0b	; 11
 620:	cd bf       	out	0x3d, r28	; 61
 622:	de bf       	out	0x3e, r29	; 62
 624:	6c 01       	movw	r12, r24
 626:	7b 01       	movw	r14, r22
 628:	8a 01       	movw	r16, r20
 62a:	fc 01       	movw	r30, r24
 62c:	16 82       	std	Z+6, r1	; 0x06
 62e:	17 82       	std	Z+7, r1	; 0x07
 630:	83 81       	ldd	r24, Z+3	; 0x03
 632:	81 ff       	sbrs	r24, 1
 634:	cc c1       	rjmp	.+920    	; 0x9ce <vfprintf+0x3d8>
 636:	ce 01       	movw	r24, r28
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	3c 01       	movw	r6, r24
 63c:	f6 01       	movw	r30, r12
 63e:	93 81       	ldd	r25, Z+3	; 0x03
 640:	f7 01       	movw	r30, r14
 642:	93 fd       	sbrc	r25, 3
 644:	85 91       	lpm	r24, Z+
 646:	93 ff       	sbrs	r25, 3
 648:	81 91       	ld	r24, Z+
 64a:	7f 01       	movw	r14, r30
 64c:	88 23       	and	r24, r24
 64e:	09 f4       	brne	.+2      	; 0x652 <vfprintf+0x5c>
 650:	ba c1       	rjmp	.+884    	; 0x9c6 <vfprintf+0x3d0>
 652:	85 32       	cpi	r24, 0x25	; 37
 654:	39 f4       	brne	.+14     	; 0x664 <vfprintf+0x6e>
 656:	93 fd       	sbrc	r25, 3
 658:	85 91       	lpm	r24, Z+
 65a:	93 ff       	sbrs	r25, 3
 65c:	81 91       	ld	r24, Z+
 65e:	7f 01       	movw	r14, r30
 660:	85 32       	cpi	r24, 0x25	; 37
 662:	29 f4       	brne	.+10     	; 0x66e <vfprintf+0x78>
 664:	b6 01       	movw	r22, r12
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputc>
 66c:	e7 cf       	rjmp	.-50     	; 0x63c <vfprintf+0x46>
 66e:	91 2c       	mov	r9, r1
 670:	21 2c       	mov	r2, r1
 672:	31 2c       	mov	r3, r1
 674:	ff e1       	ldi	r31, 0x1F	; 31
 676:	f3 15       	cp	r31, r3
 678:	d8 f0       	brcs	.+54     	; 0x6b0 <vfprintf+0xba>
 67a:	8b 32       	cpi	r24, 0x2B	; 43
 67c:	79 f0       	breq	.+30     	; 0x69c <vfprintf+0xa6>
 67e:	38 f4       	brcc	.+14     	; 0x68e <vfprintf+0x98>
 680:	80 32       	cpi	r24, 0x20	; 32
 682:	79 f0       	breq	.+30     	; 0x6a2 <vfprintf+0xac>
 684:	83 32       	cpi	r24, 0x23	; 35
 686:	a1 f4       	brne	.+40     	; 0x6b0 <vfprintf+0xba>
 688:	23 2d       	mov	r18, r3
 68a:	20 61       	ori	r18, 0x10	; 16
 68c:	1d c0       	rjmp	.+58     	; 0x6c8 <vfprintf+0xd2>
 68e:	8d 32       	cpi	r24, 0x2D	; 45
 690:	61 f0       	breq	.+24     	; 0x6aa <vfprintf+0xb4>
 692:	80 33       	cpi	r24, 0x30	; 48
 694:	69 f4       	brne	.+26     	; 0x6b0 <vfprintf+0xba>
 696:	23 2d       	mov	r18, r3
 698:	21 60       	ori	r18, 0x01	; 1
 69a:	16 c0       	rjmp	.+44     	; 0x6c8 <vfprintf+0xd2>
 69c:	83 2d       	mov	r24, r3
 69e:	82 60       	ori	r24, 0x02	; 2
 6a0:	38 2e       	mov	r3, r24
 6a2:	e3 2d       	mov	r30, r3
 6a4:	e4 60       	ori	r30, 0x04	; 4
 6a6:	3e 2e       	mov	r3, r30
 6a8:	2a c0       	rjmp	.+84     	; 0x6fe <vfprintf+0x108>
 6aa:	f3 2d       	mov	r31, r3
 6ac:	f8 60       	ori	r31, 0x08	; 8
 6ae:	1d c0       	rjmp	.+58     	; 0x6ea <vfprintf+0xf4>
 6b0:	37 fc       	sbrc	r3, 7
 6b2:	2d c0       	rjmp	.+90     	; 0x70e <vfprintf+0x118>
 6b4:	20 ed       	ldi	r18, 0xD0	; 208
 6b6:	28 0f       	add	r18, r24
 6b8:	2a 30       	cpi	r18, 0x0A	; 10
 6ba:	40 f0       	brcs	.+16     	; 0x6cc <vfprintf+0xd6>
 6bc:	8e 32       	cpi	r24, 0x2E	; 46
 6be:	b9 f4       	brne	.+46     	; 0x6ee <vfprintf+0xf8>
 6c0:	36 fc       	sbrc	r3, 6
 6c2:	81 c1       	rjmp	.+770    	; 0x9c6 <vfprintf+0x3d0>
 6c4:	23 2d       	mov	r18, r3
 6c6:	20 64       	ori	r18, 0x40	; 64
 6c8:	32 2e       	mov	r3, r18
 6ca:	19 c0       	rjmp	.+50     	; 0x6fe <vfprintf+0x108>
 6cc:	36 fe       	sbrs	r3, 6
 6ce:	06 c0       	rjmp	.+12     	; 0x6dc <vfprintf+0xe6>
 6d0:	8a e0       	ldi	r24, 0x0A	; 10
 6d2:	98 9e       	mul	r9, r24
 6d4:	20 0d       	add	r18, r0
 6d6:	11 24       	eor	r1, r1
 6d8:	92 2e       	mov	r9, r18
 6da:	11 c0       	rjmp	.+34     	; 0x6fe <vfprintf+0x108>
 6dc:	ea e0       	ldi	r30, 0x0A	; 10
 6de:	2e 9e       	mul	r2, r30
 6e0:	20 0d       	add	r18, r0
 6e2:	11 24       	eor	r1, r1
 6e4:	22 2e       	mov	r2, r18
 6e6:	f3 2d       	mov	r31, r3
 6e8:	f0 62       	ori	r31, 0x20	; 32
 6ea:	3f 2e       	mov	r3, r31
 6ec:	08 c0       	rjmp	.+16     	; 0x6fe <vfprintf+0x108>
 6ee:	8c 36       	cpi	r24, 0x6C	; 108
 6f0:	21 f4       	brne	.+8      	; 0x6fa <vfprintf+0x104>
 6f2:	83 2d       	mov	r24, r3
 6f4:	80 68       	ori	r24, 0x80	; 128
 6f6:	38 2e       	mov	r3, r24
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <vfprintf+0x108>
 6fa:	88 36       	cpi	r24, 0x68	; 104
 6fc:	41 f4       	brne	.+16     	; 0x70e <vfprintf+0x118>
 6fe:	f7 01       	movw	r30, r14
 700:	93 fd       	sbrc	r25, 3
 702:	85 91       	lpm	r24, Z+
 704:	93 ff       	sbrs	r25, 3
 706:	81 91       	ld	r24, Z+
 708:	7f 01       	movw	r14, r30
 70a:	81 11       	cpse	r24, r1
 70c:	b3 cf       	rjmp	.-154    	; 0x674 <vfprintf+0x7e>
 70e:	98 2f       	mov	r25, r24
 710:	9f 7d       	andi	r25, 0xDF	; 223
 712:	95 54       	subi	r25, 0x45	; 69
 714:	93 30       	cpi	r25, 0x03	; 3
 716:	28 f4       	brcc	.+10     	; 0x722 <vfprintf+0x12c>
 718:	0c 5f       	subi	r16, 0xFC	; 252
 71a:	1f 4f       	sbci	r17, 0xFF	; 255
 71c:	9f e3       	ldi	r25, 0x3F	; 63
 71e:	99 83       	std	Y+1, r25	; 0x01
 720:	0d c0       	rjmp	.+26     	; 0x73c <vfprintf+0x146>
 722:	83 36       	cpi	r24, 0x63	; 99
 724:	31 f0       	breq	.+12     	; 0x732 <vfprintf+0x13c>
 726:	83 37       	cpi	r24, 0x73	; 115
 728:	71 f0       	breq	.+28     	; 0x746 <vfprintf+0x150>
 72a:	83 35       	cpi	r24, 0x53	; 83
 72c:	09 f0       	breq	.+2      	; 0x730 <vfprintf+0x13a>
 72e:	59 c0       	rjmp	.+178    	; 0x7e2 <vfprintf+0x1ec>
 730:	21 c0       	rjmp	.+66     	; 0x774 <vfprintf+0x17e>
 732:	f8 01       	movw	r30, r16
 734:	80 81       	ld	r24, Z
 736:	89 83       	std	Y+1, r24	; 0x01
 738:	0e 5f       	subi	r16, 0xFE	; 254
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	88 24       	eor	r8, r8
 73e:	83 94       	inc	r8
 740:	91 2c       	mov	r9, r1
 742:	53 01       	movw	r10, r6
 744:	13 c0       	rjmp	.+38     	; 0x76c <vfprintf+0x176>
 746:	28 01       	movw	r4, r16
 748:	f2 e0       	ldi	r31, 0x02	; 2
 74a:	4f 0e       	add	r4, r31
 74c:	51 1c       	adc	r5, r1
 74e:	f8 01       	movw	r30, r16
 750:	a0 80       	ld	r10, Z
 752:	b1 80       	ldd	r11, Z+1	; 0x01
 754:	36 fe       	sbrs	r3, 6
 756:	03 c0       	rjmp	.+6      	; 0x75e <vfprintf+0x168>
 758:	69 2d       	mov	r22, r9
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <vfprintf+0x16c>
 75e:	6f ef       	ldi	r22, 0xFF	; 255
 760:	7f ef       	ldi	r23, 0xFF	; 255
 762:	c5 01       	movw	r24, r10
 764:	0e 94 0a 05 	call	0xa14	; 0xa14 <strnlen>
 768:	4c 01       	movw	r8, r24
 76a:	82 01       	movw	r16, r4
 76c:	f3 2d       	mov	r31, r3
 76e:	ff 77       	andi	r31, 0x7F	; 127
 770:	3f 2e       	mov	r3, r31
 772:	16 c0       	rjmp	.+44     	; 0x7a0 <vfprintf+0x1aa>
 774:	28 01       	movw	r4, r16
 776:	22 e0       	ldi	r18, 0x02	; 2
 778:	42 0e       	add	r4, r18
 77a:	51 1c       	adc	r5, r1
 77c:	f8 01       	movw	r30, r16
 77e:	a0 80       	ld	r10, Z
 780:	b1 80       	ldd	r11, Z+1	; 0x01
 782:	36 fe       	sbrs	r3, 6
 784:	03 c0       	rjmp	.+6      	; 0x78c <vfprintf+0x196>
 786:	69 2d       	mov	r22, r9
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <vfprintf+0x19a>
 78c:	6f ef       	ldi	r22, 0xFF	; 255
 78e:	7f ef       	ldi	r23, 0xFF	; 255
 790:	c5 01       	movw	r24, r10
 792:	0e 94 ff 04 	call	0x9fe	; 0x9fe <strnlen_P>
 796:	4c 01       	movw	r8, r24
 798:	f3 2d       	mov	r31, r3
 79a:	f0 68       	ori	r31, 0x80	; 128
 79c:	3f 2e       	mov	r3, r31
 79e:	82 01       	movw	r16, r4
 7a0:	33 fc       	sbrc	r3, 3
 7a2:	1b c0       	rjmp	.+54     	; 0x7da <vfprintf+0x1e4>
 7a4:	82 2d       	mov	r24, r2
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	88 16       	cp	r8, r24
 7aa:	99 06       	cpc	r9, r25
 7ac:	b0 f4       	brcc	.+44     	; 0x7da <vfprintf+0x1e4>
 7ae:	b6 01       	movw	r22, r12
 7b0:	80 e2       	ldi	r24, 0x20	; 32
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputc>
 7b8:	2a 94       	dec	r2
 7ba:	f4 cf       	rjmp	.-24     	; 0x7a4 <vfprintf+0x1ae>
 7bc:	f5 01       	movw	r30, r10
 7be:	37 fc       	sbrc	r3, 7
 7c0:	85 91       	lpm	r24, Z+
 7c2:	37 fe       	sbrs	r3, 7
 7c4:	81 91       	ld	r24, Z+
 7c6:	5f 01       	movw	r10, r30
 7c8:	b6 01       	movw	r22, r12
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputc>
 7d0:	21 10       	cpse	r2, r1
 7d2:	2a 94       	dec	r2
 7d4:	21 e0       	ldi	r18, 0x01	; 1
 7d6:	82 1a       	sub	r8, r18
 7d8:	91 08       	sbc	r9, r1
 7da:	81 14       	cp	r8, r1
 7dc:	91 04       	cpc	r9, r1
 7de:	71 f7       	brne	.-36     	; 0x7bc <vfprintf+0x1c6>
 7e0:	e8 c0       	rjmp	.+464    	; 0x9b2 <vfprintf+0x3bc>
 7e2:	84 36       	cpi	r24, 0x64	; 100
 7e4:	11 f0       	breq	.+4      	; 0x7ea <vfprintf+0x1f4>
 7e6:	89 36       	cpi	r24, 0x69	; 105
 7e8:	41 f5       	brne	.+80     	; 0x83a <vfprintf+0x244>
 7ea:	f8 01       	movw	r30, r16
 7ec:	37 fe       	sbrs	r3, 7
 7ee:	07 c0       	rjmp	.+14     	; 0x7fe <vfprintf+0x208>
 7f0:	60 81       	ld	r22, Z
 7f2:	71 81       	ldd	r23, Z+1	; 0x01
 7f4:	82 81       	ldd	r24, Z+2	; 0x02
 7f6:	93 81       	ldd	r25, Z+3	; 0x03
 7f8:	0c 5f       	subi	r16, 0xFC	; 252
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <vfprintf+0x218>
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	07 2e       	mov	r0, r23
 804:	00 0c       	add	r0, r0
 806:	88 0b       	sbc	r24, r24
 808:	99 0b       	sbc	r25, r25
 80a:	0e 5f       	subi	r16, 0xFE	; 254
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	f3 2d       	mov	r31, r3
 810:	ff 76       	andi	r31, 0x6F	; 111
 812:	3f 2e       	mov	r3, r31
 814:	97 ff       	sbrs	r25, 7
 816:	09 c0       	rjmp	.+18     	; 0x82a <vfprintf+0x234>
 818:	90 95       	com	r25
 81a:	80 95       	com	r24
 81c:	70 95       	com	r23
 81e:	61 95       	neg	r22
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	f0 68       	ori	r31, 0x80	; 128
 828:	3f 2e       	mov	r3, r31
 82a:	2a e0       	ldi	r18, 0x0A	; 10
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	a3 01       	movw	r20, r6
 830:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__ultoa_invert>
 834:	88 2e       	mov	r8, r24
 836:	86 18       	sub	r8, r6
 838:	45 c0       	rjmp	.+138    	; 0x8c4 <vfprintf+0x2ce>
 83a:	85 37       	cpi	r24, 0x75	; 117
 83c:	31 f4       	brne	.+12     	; 0x84a <vfprintf+0x254>
 83e:	23 2d       	mov	r18, r3
 840:	2f 7e       	andi	r18, 0xEF	; 239
 842:	b2 2e       	mov	r11, r18
 844:	2a e0       	ldi	r18, 0x0A	; 10
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	25 c0       	rjmp	.+74     	; 0x894 <vfprintf+0x29e>
 84a:	93 2d       	mov	r25, r3
 84c:	99 7f       	andi	r25, 0xF9	; 249
 84e:	b9 2e       	mov	r11, r25
 850:	8f 36       	cpi	r24, 0x6F	; 111
 852:	c1 f0       	breq	.+48     	; 0x884 <vfprintf+0x28e>
 854:	18 f4       	brcc	.+6      	; 0x85c <vfprintf+0x266>
 856:	88 35       	cpi	r24, 0x58	; 88
 858:	79 f0       	breq	.+30     	; 0x878 <vfprintf+0x282>
 85a:	b5 c0       	rjmp	.+362    	; 0x9c6 <vfprintf+0x3d0>
 85c:	80 37       	cpi	r24, 0x70	; 112
 85e:	19 f0       	breq	.+6      	; 0x866 <vfprintf+0x270>
 860:	88 37       	cpi	r24, 0x78	; 120
 862:	21 f0       	breq	.+8      	; 0x86c <vfprintf+0x276>
 864:	b0 c0       	rjmp	.+352    	; 0x9c6 <vfprintf+0x3d0>
 866:	e9 2f       	mov	r30, r25
 868:	e0 61       	ori	r30, 0x10	; 16
 86a:	be 2e       	mov	r11, r30
 86c:	b4 fe       	sbrs	r11, 4
 86e:	0d c0       	rjmp	.+26     	; 0x88a <vfprintf+0x294>
 870:	fb 2d       	mov	r31, r11
 872:	f4 60       	ori	r31, 0x04	; 4
 874:	bf 2e       	mov	r11, r31
 876:	09 c0       	rjmp	.+18     	; 0x88a <vfprintf+0x294>
 878:	34 fe       	sbrs	r3, 4
 87a:	0a c0       	rjmp	.+20     	; 0x890 <vfprintf+0x29a>
 87c:	29 2f       	mov	r18, r25
 87e:	26 60       	ori	r18, 0x06	; 6
 880:	b2 2e       	mov	r11, r18
 882:	06 c0       	rjmp	.+12     	; 0x890 <vfprintf+0x29a>
 884:	28 e0       	ldi	r18, 0x08	; 8
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	05 c0       	rjmp	.+10     	; 0x894 <vfprintf+0x29e>
 88a:	20 e1       	ldi	r18, 0x10	; 16
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894 <vfprintf+0x29e>
 890:	20 e1       	ldi	r18, 0x10	; 16
 892:	32 e0       	ldi	r19, 0x02	; 2
 894:	f8 01       	movw	r30, r16
 896:	b7 fe       	sbrs	r11, 7
 898:	07 c0       	rjmp	.+14     	; 0x8a8 <vfprintf+0x2b2>
 89a:	60 81       	ld	r22, Z
 89c:	71 81       	ldd	r23, Z+1	; 0x01
 89e:	82 81       	ldd	r24, Z+2	; 0x02
 8a0:	93 81       	ldd	r25, Z+3	; 0x03
 8a2:	0c 5f       	subi	r16, 0xFC	; 252
 8a4:	1f 4f       	sbci	r17, 0xFF	; 255
 8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <vfprintf+0x2be>
 8a8:	60 81       	ld	r22, Z
 8aa:	71 81       	ldd	r23, Z+1	; 0x01
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 5f       	subi	r16, 0xFE	; 254
 8b2:	1f 4f       	sbci	r17, 0xFF	; 255
 8b4:	a3 01       	movw	r20, r6
 8b6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__ultoa_invert>
 8ba:	88 2e       	mov	r8, r24
 8bc:	86 18       	sub	r8, r6
 8be:	fb 2d       	mov	r31, r11
 8c0:	ff 77       	andi	r31, 0x7F	; 127
 8c2:	3f 2e       	mov	r3, r31
 8c4:	36 fe       	sbrs	r3, 6
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <vfprintf+0x2ec>
 8c8:	23 2d       	mov	r18, r3
 8ca:	2e 7f       	andi	r18, 0xFE	; 254
 8cc:	a2 2e       	mov	r10, r18
 8ce:	89 14       	cp	r8, r9
 8d0:	58 f4       	brcc	.+22     	; 0x8e8 <vfprintf+0x2f2>
 8d2:	34 fe       	sbrs	r3, 4
 8d4:	0b c0       	rjmp	.+22     	; 0x8ec <vfprintf+0x2f6>
 8d6:	32 fc       	sbrc	r3, 2
 8d8:	09 c0       	rjmp	.+18     	; 0x8ec <vfprintf+0x2f6>
 8da:	83 2d       	mov	r24, r3
 8dc:	8e 7e       	andi	r24, 0xEE	; 238
 8de:	a8 2e       	mov	r10, r24
 8e0:	05 c0       	rjmp	.+10     	; 0x8ec <vfprintf+0x2f6>
 8e2:	b8 2c       	mov	r11, r8
 8e4:	a3 2c       	mov	r10, r3
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <vfprintf+0x2f8>
 8e8:	b8 2c       	mov	r11, r8
 8ea:	01 c0       	rjmp	.+2      	; 0x8ee <vfprintf+0x2f8>
 8ec:	b9 2c       	mov	r11, r9
 8ee:	a4 fe       	sbrs	r10, 4
 8f0:	0f c0       	rjmp	.+30     	; 0x910 <vfprintf+0x31a>
 8f2:	fe 01       	movw	r30, r28
 8f4:	e8 0d       	add	r30, r8
 8f6:	f1 1d       	adc	r31, r1
 8f8:	80 81       	ld	r24, Z
 8fa:	80 33       	cpi	r24, 0x30	; 48
 8fc:	21 f4       	brne	.+8      	; 0x906 <vfprintf+0x310>
 8fe:	9a 2d       	mov	r25, r10
 900:	99 7e       	andi	r25, 0xE9	; 233
 902:	a9 2e       	mov	r10, r25
 904:	09 c0       	rjmp	.+18     	; 0x918 <vfprintf+0x322>
 906:	a2 fe       	sbrs	r10, 2
 908:	06 c0       	rjmp	.+12     	; 0x916 <vfprintf+0x320>
 90a:	b3 94       	inc	r11
 90c:	b3 94       	inc	r11
 90e:	04 c0       	rjmp	.+8      	; 0x918 <vfprintf+0x322>
 910:	8a 2d       	mov	r24, r10
 912:	86 78       	andi	r24, 0x86	; 134
 914:	09 f0       	breq	.+2      	; 0x918 <vfprintf+0x322>
 916:	b3 94       	inc	r11
 918:	a3 fc       	sbrc	r10, 3
 91a:	11 c0       	rjmp	.+34     	; 0x93e <vfprintf+0x348>
 91c:	a0 fe       	sbrs	r10, 0
 91e:	06 c0       	rjmp	.+12     	; 0x92c <vfprintf+0x336>
 920:	b2 14       	cp	r11, r2
 922:	88 f4       	brcc	.+34     	; 0x946 <vfprintf+0x350>
 924:	28 0c       	add	r2, r8
 926:	92 2c       	mov	r9, r2
 928:	9b 18       	sub	r9, r11
 92a:	0e c0       	rjmp	.+28     	; 0x948 <vfprintf+0x352>
 92c:	b2 14       	cp	r11, r2
 92e:	60 f4       	brcc	.+24     	; 0x948 <vfprintf+0x352>
 930:	b6 01       	movw	r22, r12
 932:	80 e2       	ldi	r24, 0x20	; 32
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputc>
 93a:	b3 94       	inc	r11
 93c:	f7 cf       	rjmp	.-18     	; 0x92c <vfprintf+0x336>
 93e:	b2 14       	cp	r11, r2
 940:	18 f4       	brcc	.+6      	; 0x948 <vfprintf+0x352>
 942:	2b 18       	sub	r2, r11
 944:	02 c0       	rjmp	.+4      	; 0x94a <vfprintf+0x354>
 946:	98 2c       	mov	r9, r8
 948:	21 2c       	mov	r2, r1
 94a:	a4 fe       	sbrs	r10, 4
 94c:	10 c0       	rjmp	.+32     	; 0x96e <vfprintf+0x378>
 94e:	b6 01       	movw	r22, r12
 950:	80 e3       	ldi	r24, 0x30	; 48
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputc>
 958:	a2 fe       	sbrs	r10, 2
 95a:	17 c0       	rjmp	.+46     	; 0x98a <vfprintf+0x394>
 95c:	a1 fc       	sbrc	r10, 1
 95e:	03 c0       	rjmp	.+6      	; 0x966 <vfprintf+0x370>
 960:	88 e7       	ldi	r24, 0x78	; 120
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	02 c0       	rjmp	.+4      	; 0x96a <vfprintf+0x374>
 966:	88 e5       	ldi	r24, 0x58	; 88
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	b6 01       	movw	r22, r12
 96c:	0c c0       	rjmp	.+24     	; 0x986 <vfprintf+0x390>
 96e:	8a 2d       	mov	r24, r10
 970:	86 78       	andi	r24, 0x86	; 134
 972:	59 f0       	breq	.+22     	; 0x98a <vfprintf+0x394>
 974:	a1 fe       	sbrs	r10, 1
 976:	02 c0       	rjmp	.+4      	; 0x97c <vfprintf+0x386>
 978:	8b e2       	ldi	r24, 0x2B	; 43
 97a:	01 c0       	rjmp	.+2      	; 0x97e <vfprintf+0x388>
 97c:	80 e2       	ldi	r24, 0x20	; 32
 97e:	a7 fc       	sbrc	r10, 7
 980:	8d e2       	ldi	r24, 0x2D	; 45
 982:	b6 01       	movw	r22, r12
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputc>
 98a:	89 14       	cp	r8, r9
 98c:	38 f4       	brcc	.+14     	; 0x99c <vfprintf+0x3a6>
 98e:	b6 01       	movw	r22, r12
 990:	80 e3       	ldi	r24, 0x30	; 48
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputc>
 998:	9a 94       	dec	r9
 99a:	f7 cf       	rjmp	.-18     	; 0x98a <vfprintf+0x394>
 99c:	8a 94       	dec	r8
 99e:	f3 01       	movw	r30, r6
 9a0:	e8 0d       	add	r30, r8
 9a2:	f1 1d       	adc	r31, r1
 9a4:	80 81       	ld	r24, Z
 9a6:	b6 01       	movw	r22, r12
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputc>
 9ae:	81 10       	cpse	r8, r1
 9b0:	f5 cf       	rjmp	.-22     	; 0x99c <vfprintf+0x3a6>
 9b2:	22 20       	and	r2, r2
 9b4:	09 f4       	brne	.+2      	; 0x9b8 <vfprintf+0x3c2>
 9b6:	42 ce       	rjmp	.-892    	; 0x63c <vfprintf+0x46>
 9b8:	b6 01       	movw	r22, r12
 9ba:	80 e2       	ldi	r24, 0x20	; 32
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 15 05 	call	0xa2a	; 0xa2a <fputc>
 9c2:	2a 94       	dec	r2
 9c4:	f6 cf       	rjmp	.-20     	; 0x9b2 <vfprintf+0x3bc>
 9c6:	f6 01       	movw	r30, r12
 9c8:	86 81       	ldd	r24, Z+6	; 0x06
 9ca:	97 81       	ldd	r25, Z+7	; 0x07
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <vfprintf+0x3dc>
 9ce:	8f ef       	ldi	r24, 0xFF	; 255
 9d0:	9f ef       	ldi	r25, 0xFF	; 255
 9d2:	2b 96       	adiw	r28, 0x0b	; 11
 9d4:	cd bf       	out	0x3d, r28	; 61
 9d6:	de bf       	out	0x3e, r29	; 62
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	1f 91       	pop	r17
 9de:	0f 91       	pop	r16
 9e0:	ff 90       	pop	r15
 9e2:	ef 90       	pop	r14
 9e4:	df 90       	pop	r13
 9e6:	cf 90       	pop	r12
 9e8:	bf 90       	pop	r11
 9ea:	af 90       	pop	r10
 9ec:	9f 90       	pop	r9
 9ee:	8f 90       	pop	r8
 9f0:	7f 90       	pop	r7
 9f2:	6f 90       	pop	r6
 9f4:	5f 90       	pop	r5
 9f6:	4f 90       	pop	r4
 9f8:	3f 90       	pop	r3
 9fa:	2f 90       	pop	r2
 9fc:	08 95       	ret

000009fe <strnlen_P>:
 9fe:	fc 01       	movw	r30, r24
 a00:	05 90       	lpm	r0, Z+
 a02:	61 50       	subi	r22, 0x01	; 1
 a04:	70 40       	sbci	r23, 0x00	; 0
 a06:	01 10       	cpse	r0, r1
 a08:	d8 f7       	brcc	.-10     	; 0xa00 <strnlen_P+0x2>
 a0a:	80 95       	com	r24
 a0c:	90 95       	com	r25
 a0e:	8e 0f       	add	r24, r30
 a10:	9f 1f       	adc	r25, r31
 a12:	08 95       	ret

00000a14 <strnlen>:
 a14:	fc 01       	movw	r30, r24
 a16:	61 50       	subi	r22, 0x01	; 1
 a18:	70 40       	sbci	r23, 0x00	; 0
 a1a:	01 90       	ld	r0, Z+
 a1c:	01 10       	cpse	r0, r1
 a1e:	d8 f7       	brcc	.-10     	; 0xa16 <strnlen+0x2>
 a20:	80 95       	com	r24
 a22:	90 95       	com	r25
 a24:	8e 0f       	add	r24, r30
 a26:	9f 1f       	adc	r25, r31
 a28:	08 95       	ret

00000a2a <fputc>:
 a2a:	0f 93       	push	r16
 a2c:	1f 93       	push	r17
 a2e:	cf 93       	push	r28
 a30:	df 93       	push	r29
 a32:	fb 01       	movw	r30, r22
 a34:	23 81       	ldd	r18, Z+3	; 0x03
 a36:	21 fd       	sbrc	r18, 1
 a38:	03 c0       	rjmp	.+6      	; 0xa40 <fputc+0x16>
 a3a:	8f ef       	ldi	r24, 0xFF	; 255
 a3c:	9f ef       	ldi	r25, 0xFF	; 255
 a3e:	2c c0       	rjmp	.+88     	; 0xa98 <fputc+0x6e>
 a40:	22 ff       	sbrs	r18, 2
 a42:	16 c0       	rjmp	.+44     	; 0xa70 <fputc+0x46>
 a44:	46 81       	ldd	r20, Z+6	; 0x06
 a46:	57 81       	ldd	r21, Z+7	; 0x07
 a48:	24 81       	ldd	r18, Z+4	; 0x04
 a4a:	35 81       	ldd	r19, Z+5	; 0x05
 a4c:	42 17       	cp	r20, r18
 a4e:	53 07       	cpc	r21, r19
 a50:	44 f4       	brge	.+16     	; 0xa62 <fputc+0x38>
 a52:	a0 81       	ld	r26, Z
 a54:	b1 81       	ldd	r27, Z+1	; 0x01
 a56:	9d 01       	movw	r18, r26
 a58:	2f 5f       	subi	r18, 0xFF	; 255
 a5a:	3f 4f       	sbci	r19, 0xFF	; 255
 a5c:	20 83       	st	Z, r18
 a5e:	31 83       	std	Z+1, r19	; 0x01
 a60:	8c 93       	st	X, r24
 a62:	26 81       	ldd	r18, Z+6	; 0x06
 a64:	37 81       	ldd	r19, Z+7	; 0x07
 a66:	2f 5f       	subi	r18, 0xFF	; 255
 a68:	3f 4f       	sbci	r19, 0xFF	; 255
 a6a:	26 83       	std	Z+6, r18	; 0x06
 a6c:	37 83       	std	Z+7, r19	; 0x07
 a6e:	14 c0       	rjmp	.+40     	; 0xa98 <fputc+0x6e>
 a70:	8b 01       	movw	r16, r22
 a72:	ec 01       	movw	r28, r24
 a74:	fb 01       	movw	r30, r22
 a76:	00 84       	ldd	r0, Z+8	; 0x08
 a78:	f1 85       	ldd	r31, Z+9	; 0x09
 a7a:	e0 2d       	mov	r30, r0
 a7c:	09 95       	icall
 a7e:	89 2b       	or	r24, r25
 a80:	e1 f6       	brne	.-72     	; 0xa3a <fputc+0x10>
 a82:	d8 01       	movw	r26, r16
 a84:	16 96       	adiw	r26, 0x06	; 6
 a86:	8d 91       	ld	r24, X+
 a88:	9c 91       	ld	r25, X
 a8a:	17 97       	sbiw	r26, 0x07	; 7
 a8c:	01 96       	adiw	r24, 0x01	; 1
 a8e:	16 96       	adiw	r26, 0x06	; 6
 a90:	8d 93       	st	X+, r24
 a92:	9c 93       	st	X, r25
 a94:	17 97       	sbiw	r26, 0x07	; 7
 a96:	ce 01       	movw	r24, r28
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	1f 91       	pop	r17
 a9e:	0f 91       	pop	r16
 aa0:	08 95       	ret

00000aa2 <__ultoa_invert>:
 aa2:	fa 01       	movw	r30, r20
 aa4:	aa 27       	eor	r26, r26
 aa6:	28 30       	cpi	r18, 0x08	; 8
 aa8:	51 f1       	breq	.+84     	; 0xafe <__ultoa_invert+0x5c>
 aaa:	20 31       	cpi	r18, 0x10	; 16
 aac:	81 f1       	breq	.+96     	; 0xb0e <__ultoa_invert+0x6c>
 aae:	e8 94       	clt
 ab0:	6f 93       	push	r22
 ab2:	6e 7f       	andi	r22, 0xFE	; 254
 ab4:	6e 5f       	subi	r22, 0xFE	; 254
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	8f 4f       	sbci	r24, 0xFF	; 255
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	af 4f       	sbci	r26, 0xFF	; 255
 abe:	b1 e0       	ldi	r27, 0x01	; 1
 ac0:	3e d0       	rcall	.+124    	; 0xb3e <__ultoa_invert+0x9c>
 ac2:	b4 e0       	ldi	r27, 0x04	; 4
 ac4:	3c d0       	rcall	.+120    	; 0xb3e <__ultoa_invert+0x9c>
 ac6:	67 0f       	add	r22, r23
 ac8:	78 1f       	adc	r23, r24
 aca:	89 1f       	adc	r24, r25
 acc:	9a 1f       	adc	r25, r26
 ace:	a1 1d       	adc	r26, r1
 ad0:	68 0f       	add	r22, r24
 ad2:	79 1f       	adc	r23, r25
 ad4:	8a 1f       	adc	r24, r26
 ad6:	91 1d       	adc	r25, r1
 ad8:	a1 1d       	adc	r26, r1
 ada:	6a 0f       	add	r22, r26
 adc:	71 1d       	adc	r23, r1
 ade:	81 1d       	adc	r24, r1
 ae0:	91 1d       	adc	r25, r1
 ae2:	a1 1d       	adc	r26, r1
 ae4:	20 d0       	rcall	.+64     	; 0xb26 <__ultoa_invert+0x84>
 ae6:	09 f4       	brne	.+2      	; 0xaea <__ultoa_invert+0x48>
 ae8:	68 94       	set
 aea:	3f 91       	pop	r19
 aec:	2a e0       	ldi	r18, 0x0A	; 10
 aee:	26 9f       	mul	r18, r22
 af0:	11 24       	eor	r1, r1
 af2:	30 19       	sub	r19, r0
 af4:	30 5d       	subi	r19, 0xD0	; 208
 af6:	31 93       	st	Z+, r19
 af8:	de f6       	brtc	.-74     	; 0xab0 <__ultoa_invert+0xe>
 afa:	cf 01       	movw	r24, r30
 afc:	08 95       	ret
 afe:	46 2f       	mov	r20, r22
 b00:	47 70       	andi	r20, 0x07	; 7
 b02:	40 5d       	subi	r20, 0xD0	; 208
 b04:	41 93       	st	Z+, r20
 b06:	b3 e0       	ldi	r27, 0x03	; 3
 b08:	0f d0       	rcall	.+30     	; 0xb28 <__ultoa_invert+0x86>
 b0a:	c9 f7       	brne	.-14     	; 0xafe <__ultoa_invert+0x5c>
 b0c:	f6 cf       	rjmp	.-20     	; 0xafa <__ultoa_invert+0x58>
 b0e:	46 2f       	mov	r20, r22
 b10:	4f 70       	andi	r20, 0x0F	; 15
 b12:	40 5d       	subi	r20, 0xD0	; 208
 b14:	4a 33       	cpi	r20, 0x3A	; 58
 b16:	18 f0       	brcs	.+6      	; 0xb1e <__ultoa_invert+0x7c>
 b18:	49 5d       	subi	r20, 0xD9	; 217
 b1a:	31 fd       	sbrc	r19, 1
 b1c:	40 52       	subi	r20, 0x20	; 32
 b1e:	41 93       	st	Z+, r20
 b20:	02 d0       	rcall	.+4      	; 0xb26 <__ultoa_invert+0x84>
 b22:	a9 f7       	brne	.-22     	; 0xb0e <__ultoa_invert+0x6c>
 b24:	ea cf       	rjmp	.-44     	; 0xafa <__ultoa_invert+0x58>
 b26:	b4 e0       	ldi	r27, 0x04	; 4
 b28:	a6 95       	lsr	r26
 b2a:	97 95       	ror	r25
 b2c:	87 95       	ror	r24
 b2e:	77 95       	ror	r23
 b30:	67 95       	ror	r22
 b32:	ba 95       	dec	r27
 b34:	c9 f7       	brne	.-14     	; 0xb28 <__ultoa_invert+0x86>
 b36:	00 97       	sbiw	r24, 0x00	; 0
 b38:	61 05       	cpc	r22, r1
 b3a:	71 05       	cpc	r23, r1
 b3c:	08 95       	ret
 b3e:	9b 01       	movw	r18, r22
 b40:	ac 01       	movw	r20, r24
 b42:	0a 2e       	mov	r0, r26
 b44:	06 94       	lsr	r0
 b46:	57 95       	ror	r21
 b48:	47 95       	ror	r20
 b4a:	37 95       	ror	r19
 b4c:	27 95       	ror	r18
 b4e:	ba 95       	dec	r27
 b50:	c9 f7       	brne	.-14     	; 0xb44 <__ultoa_invert+0xa2>
 b52:	62 0f       	add	r22, r18
 b54:	73 1f       	adc	r23, r19
 b56:	84 1f       	adc	r24, r20
 b58:	95 1f       	adc	r25, r21
 b5a:	a0 1d       	adc	r26, r0
 b5c:	08 95       	ret

00000b5e <_exit>:
 b5e:	f8 94       	cli

00000b60 <__stop_program>:
 b60:	ff cf       	rjmp	.-2      	; 0xb60 <__stop_program>
