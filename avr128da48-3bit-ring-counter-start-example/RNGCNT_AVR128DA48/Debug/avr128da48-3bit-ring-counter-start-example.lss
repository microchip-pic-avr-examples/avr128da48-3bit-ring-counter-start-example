
avr128da48-3bit-ring-counter-start-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00804000  00000b78  00000c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008040b6  008040b6  00000cc2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00000d60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000713d  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039c5  00000000  00000000  000080e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ac  00000000  00000000  0000baaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  0000d058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005fb5  00000000  00000000  0000d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b75  00000000  00000000  00013391  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00013f06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
   8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
   c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_29>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  8c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  90:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  94:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  98:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  9c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  ac:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  bc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  c0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  c4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  c8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  cc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  d0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  d4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  d8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  dc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  e0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  e4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  e8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df e7       	ldi	r29, 0x7F	; 127
  f6:	de bf       	out	0x3e, r29	; 62

000000f8 <__do_copy_data>:
  f8:	10 e4       	ldi	r17, 0x40	; 64
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b0 e4       	ldi	r27, 0x40	; 64
  fe:	e8 e7       	ldi	r30, 0x78	; 120
 100:	fb e0       	ldi	r31, 0x0B	; 11
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0b bf       	out	0x3b, r16	; 59
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
 108:	07 90       	elpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	a6 3b       	cpi	r26, 0xB6	; 182
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
 112:	20 e4       	ldi	r18, 0x40	; 64
 114:	a6 eb       	ldi	r26, 0xB6	; 182
 116:	b0 e4       	ldi	r27, 0x40	; 64
 118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
 11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
 11c:	ae 3b       	cpi	r26, 0xBE	; 190
 11e:	b2 07       	cpc	r27, r18
 120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
 122:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
 126:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <_exit>

0000012a <__bad_interrupt>:
 12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 12e:	0e 94 4c 02 	call	0x498	; 0x498 <system_init>
 132:	08 95       	ret

00000134 <__vector_29>:

extern buttonState_t buttonState;


ISR(PORTC_PORT_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
	/* Insert your PORTC interrupt handling code here */

	/* Clear interrupt flags */
	VPORTC_INTFLAGS = (1 << 6) | (1 << 7);
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	8b b9       	out	0x0b, r24	; 11
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
 144:	56 9a       	sbi	0x0a, 6	; 10
	LED_toggle_level();
	buttonState=KEY_PRESSED;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 b7 40 	sts	0x40B7, r24	; 0x8040b7 <buttonState>
}
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <EnableSwitchPress>:
  clock to the flipflops.
  **/
void EnableSwitchPress(void)
{
	//Enables the global interrupt
	ENABLE_INTERRUPTS();
 158:	78 94       	sei
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 15a:	e7 e5       	ldi	r30, 0x57	; 87
 15c:	f4 e0       	ldi	r31, 0x04	; 4
 15e:	80 81       	ld	r24, Z
 160:	88 7f       	andi	r24, 0xF8	; 248
 162:	82 60       	ori	r24, 0x02	; 2
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <DisableSwitchPress>:
  clock to the flipflops.
  **/
void DisableSwitchPress(void)
{
	//Disables the global interrupt
	DISABLE_INTERRUPTS();
 168:	f8 94       	cli
 16a:	e7 e5       	ldi	r30, 0x57	; 87
 16c:	f4 e0       	ldi	r31, 0x04	; 4
 16e:	80 81       	ld	r24, Z
 170:	88 7f       	andi	r24, 0xF8	; 248
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <SendButtonPressInstruction>:
  @Description
  function to send an instruction to the user to press switch,in order to display the three states of the ring counter
  **/
 void SendButtonPressInstruction( pressSwitchInstruction_t displayStringsIndex,const uint8_t *ringcounterstate)
{
	printf ("\n%d. %s %s %s %s",displayStringsIndex,pressSwitchText,toDisplayText,ringcounterstate,ringCounterText);
 176:	22 e6       	ldi	r18, 0x62	; 98
 178:	30 e4       	ldi	r19, 0x40	; 64
 17a:	3f 93       	push	r19
 17c:	2f 93       	push	r18
 17e:	7f 93       	push	r23
 180:	6f 93       	push	r22
 182:	2c e9       	ldi	r18, 0x9C	; 156
 184:	30 e4       	ldi	r19, 0x40	; 64
 186:	3f 93       	push	r19
 188:	2f 93       	push	r18
 18a:	27 ea       	ldi	r18, 0xA7	; 167
 18c:	30 e4       	ldi	r19, 0x40	; 64
 18e:	3f 93       	push	r19
 190:	2f 93       	push	r18
 192:	1f 92       	push	r1
 194:	8f 93       	push	r24
 196:	8e e0       	ldi	r24, 0x0E	; 14
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	9f 93       	push	r25
 19c:	8f 93       	push	r24
 19e:	0e 94 c2 02 	call	0x584	; 0x584 <printf>
}
 1a2:	8d b7       	in	r24, 0x3d	; 61
 1a4:	9e b7       	in	r25, 0x3e	; 62
 1a6:	0c 96       	adiw	r24, 0x0c	; 12
 1a8:	8d bf       	out	0x3d, r24	; 61
 1aa:	9e bf       	out	0x3e, r25	; 62
 1ac:	08 95       	ret

000001ae <FlipflopOutputRead>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
 1ae:	82 b1       	in	r24, 0x02	; 2
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
 1b0:	9e b1       	in	r25, 0x0e	; 14
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
 1b2:	26 b1       	in	r18, 0x06	; 6
	//Read Second FlipFlop output
	ff2Output=PORTD_get_pin_level(3);
	//Read Third FlipFlop output
	ff3Output=PORTB_get_pin_level(3);
	//Print all three FlipFlop's output on terminal window
	printf("%d %d %d\n",ff1Output,ff2Output,ff3Output);
 1b4:	23 fb       	bst	r18, 3
 1b6:	22 27       	eor	r18, r18
 1b8:	20 f9       	bld	r18, 0
 1ba:	1f 92       	push	r1
 1bc:	2f 93       	push	r18
 1be:	93 fb       	bst	r25, 3
 1c0:	99 27       	eor	r25, r25
 1c2:	90 f9       	bld	r25, 0
 1c4:	1f 92       	push	r1
 1c6:	9f 93       	push	r25
 1c8:	83 fb       	bst	r24, 3
 1ca:	88 27       	eor	r24, r24
 1cc:	80 f9       	bld	r24, 0
 1ce:	1f 92       	push	r1
 1d0:	8f 93       	push	r24
 1d2:	8f e1       	ldi	r24, 0x1F	; 31
 1d4:	90 e4       	ldi	r25, 0x40	; 64
 1d6:	9f 93       	push	r25
 1d8:	8f 93       	push	r24
 1da:	0e 94 c2 02 	call	0x584	; 0x584 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f e3       	ldi	r18, 0x3F	; 63
 1e0:	8d e0       	ldi	r24, 0x0D	; 13
 1e2:	93 e0       	ldi	r25, 0x03	; 3
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <FlipflopOutputRead+0x36>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <FlipflopOutputRead+0x40>
 1ee:	00 00       	nop
	//delay is given to avoid the text display on terminal window back-to-back continously 
    _delay_ms(ONE_SEC);
}
 1f0:	8d b7       	in	r24, 0x3d	; 61
 1f2:	9e b7       	in	r25, 0x3e	; 62
 1f4:	08 96       	adiw	r24, 0x08	; 8
 1f6:	8d bf       	out	0x3d, r24	; 61
 1f8:	9e bf       	out	0x3e, r25	; 62
 1fa:	08 95       	ret

000001fc <main>:


int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 1fc:	0e 94 97 00 	call	0x12e	; 0x12e <atmel_start_init>
 200:	2f e3       	ldi	r18, 0x3F	; 63
 202:	8d e0       	ldi	r24, 0x0D	; 13
 204:	93 e0       	ldi	r25, 0x03	; 3
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 210:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 212:	4f 9a       	sbi	0x09, 7	; 9
 214:	2f e3       	ldi	r18, 0x3F	; 63
 216:	8d e0       	ldi	r24, 0x0D	; 13
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 224:	00 00       	nop
 226:	2f e3       	ldi	r18, 0x3F	; 63
 228:	8d e0       	ldi	r24, 0x0D	; 13
 22a:	93 e0       	ldi	r25, 0x03	; 3
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 234:	00 c0       	rjmp	.+0      	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 236:	00 00       	nop
  After reading the first flipflop output and if the output is equal to one, then send Low signal to the first flipflop
  This function sends Low signal to the flipflop.
 **/
void SendLowSignal(void)
{
	if(PORTA_get_pin_level(3)==1)
 238:	13 9b       	sbis	0x02, 3	; 2
 23a:	02 c0       	rjmp	.+4      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 23c:	09 98       	cbi	0x01, 1	; 1
 23e:	04 c0       	rjmp	.+8      	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		// <true"> High
		false);
			}
	else
	{
		printf("Error\n");
 240:	89 e2       	ldi	r24, 0x29	; 41
 242:	90 e4       	ldi	r25, 0x40	; 64
 244:	0e 94 d6 02 	call	0x5ac	; 0x5ac <puts>
 248:	2f e3       	ldi	r18, 0x3F	; 63
 24a:	8d e0       	ldi	r24, 0x0D	; 13
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
 258:	00 00       	nop
	 _delay_ms(ONE_SEC);
	 //setting the input pin PA1 to low, after reading first flipflop output.
	  SendLowSignal();
	  _delay_ms(ONE_SEC);
	  //first string to display on terminal window, when MCU is loaded with firmware
	  printf("%s",applicationStartedText);
 25a:	8f e2       	ldi	r24, 0x2F	; 47
 25c:	90 e4       	ldi	r25, 0x40	; 64
 25e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <puts>
	  //Sends press switch instruction to the user on terminal window.
	  SendButtonPressInstruction(FIRST_STATE_INS_TEXT,firstStateText);
 262:	60 e9       	ldi	r22, 0x90	; 144
 264:	70 e4       	ldi	r23, 0x40	; 64
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 bb 00 	call	0x176	; 0x176 <SendButtonPressInstruction>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 26c:	47 98       	cbi	0x08, 7	; 8
			EnableSwitchPress();
			ringCounterState=WAIT_FOR_SWITCH_PRESS1;
			break;
		case SECOND_STATE_OF_RNG_COUNTER:
			DisableSwitchPress();
			printf("\t\t%s=",secondStateText);
 26e:	03 e8       	ldi	r16, 0x83	; 131
 270:	10 e4       	ldi	r17, 0x40	; 64
 272:	cc e5       	ldi	r28, 0x5C	; 92
 274:	d0 e4       	ldi	r29, 0x40	; 64
			FlipflopOutputRead();
			SendButtonPressInstruction(THIRD_STATE_INS_TEXT,thirdStateText);
			EnableSwitchPress();
			ringCounterState=WAIT_FOR_SWITCH_PRESS2;
 276:	68 94       	set
 278:	ff 24       	eor	r15, r15
 27a:	f2 f8       	bld	r15, 2
  clock to the flipflops.
  *
 **/
void RingCounterState(void)
{
	switch(ringCounterState)
 27c:	80 91 b6 40 	lds	r24, 0x40B6	; 0x8040b6 <__data_end>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	61 f0       	breq	.+24     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 284:	28 f4       	brcc	.+10     	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
 286:	88 23       	and	r24, r24
 288:	49 f0       	breq	.+18     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	91 f0       	breq	.+36     	; 0x2b2 <__EEPROM_REGION_LENGTH__+0xb2>
 28e:	f8 cf       	rjmp	.-16     	; 0x280 <__EEPROM_REGION_LENGTH__+0x80>
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	21 f0       	breq	.+8      	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 294:	40 f1       	brcs	.+80     	; 0x2e6 <__EEPROM_REGION_LENGTH__+0xe6>
 296:	85 30       	cpi	r24, 0x05	; 5
 298:	f1 f1       	breq	.+124    	; 0x316 <__EEPROM_REGION_LENGTH__+0x116>
 29a:	f2 cf       	rjmp	.-28     	; 0x280 <__EEPROM_REGION_LENGTH__+0x80>
	{
		case WAIT_FOR_SWITCH_PRESS0:
		case WAIT_FOR_SWITCH_PRESS1:
		case WAIT_FOR_SWITCH_PRESS2:
			if(buttonState==KEY_PRESSED)
 29c:	90 91 b7 40 	lds	r25, 0x40B7	; 0x8040b7 <buttonState>
 2a0:	91 30       	cpi	r25, 0x01	; 1
 2a2:	61 f7       	brne	.-40     	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
			{
				ringCounterState=ringCounterState+1;
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 b6 40 	sts	0x40B6, r24	; 0x8040b6 <__data_end>
				buttonState=KEY_RELEASED;
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	80 93 b7 40 	sts	0x40B7, r24	; 0x8040b7 <buttonState>
 2b0:	e5 cf       	rjmp	.-54     	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
			}
			break;
		case FIRST_STATE_OF_RNG_COUNTER:
			DisableSwitchPress();
 2b2:	0e 94 b4 00 	call	0x168	; 0x168 <DisableSwitchPress>
			printf("\t\t%s=",firstStateText);
 2b6:	80 e9       	ldi	r24, 0x90	; 144
 2b8:	90 e4       	ldi	r25, 0x40	; 64
 2ba:	9f 93       	push	r25
 2bc:	8f 93       	push	r24
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	0e 94 c2 02 	call	0x584	; 0x584 <printf>
			FlipflopOutputRead();
 2c6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <FlipflopOutputRead>
			SendButtonPressInstruction(SECOND_STATE_INS_TEXT,secondStateText);
 2ca:	b8 01       	movw	r22, r16
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 bb 00 	call	0x176	; 0x176 <SendButtonPressInstruction>
			EnableSwitchPress();
 2d2:	0e 94 ac 00 	call	0x158	; 0x158 <EnableSwitchPress>
			ringCounterState=WAIT_FOR_SWITCH_PRESS1;
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	80 93 b6 40 	sts	0x40B6, r24	; 0x8040b6 <__data_end>
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	cb cf       	rjmp	.-106    	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
			break;
		case SECOND_STATE_OF_RNG_COUNTER:
			DisableSwitchPress();
 2e6:	0e 94 b4 00 	call	0x168	; 0x168 <DisableSwitchPress>
			printf("\t\t%s=",secondStateText);
 2ea:	1f 93       	push	r17
 2ec:	0f 93       	push	r16
 2ee:	df 93       	push	r29
 2f0:	cf 93       	push	r28
 2f2:	0e 94 c2 02 	call	0x584	; 0x584 <printf>
			FlipflopOutputRead();
 2f6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <FlipflopOutputRead>
			SendButtonPressInstruction(THIRD_STATE_INS_TEXT,thirdStateText);
 2fa:	67 e7       	ldi	r22, 0x77	; 119
 2fc:	70 e4       	ldi	r23, 0x40	; 64
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	0e 94 bb 00 	call	0x176	; 0x176 <SendButtonPressInstruction>
			EnableSwitchPress();
 304:	0e 94 ac 00 	call	0x158	; 0x158 <EnableSwitchPress>
			ringCounterState=WAIT_FOR_SWITCH_PRESS2;
 308:	f0 92 b6 40 	sts	0x40B6, r15	; 0x8040b6 <__data_end>
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	b3 cf       	rjmp	.-154    	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
			break;
		case THIRD_STATE_OF_RNG_COUNTER:
			DisableSwitchPress();
 316:	0e 94 b4 00 	call	0x168	; 0x168 <DisableSwitchPress>
			printf("\t\t%s=",thirdStateText);
 31a:	87 e7       	ldi	r24, 0x77	; 119
 31c:	90 e4       	ldi	r25, 0x40	; 64
 31e:	9f 93       	push	r25
 320:	8f 93       	push	r24
 322:	df 93       	push	r29
 324:	cf 93       	push	r28
 326:	0e 94 c2 02 	call	0x584	; 0x584 <printf>
			FlipflopOutputRead();
 32a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <FlipflopOutputRead>
			SendButtonPressInstruction(FIRST_STATE_INS_TEXT,firstStateText);
 32e:	60 e9       	ldi	r22, 0x90	; 144
 330:	70 e4       	ldi	r23, 0x40	; 64
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 bb 00 	call	0x176	; 0x176 <SendButtonPressInstruction>
			EnableSwitchPress();
 338:	0e 94 ac 00 	call	0x158	; 0x158 <EnableSwitchPress>
			ringCounterState=WAIT_FOR_SWITCH_PRESS0;
 33c:	10 92 b6 40 	sts	0x40B6, r1	; 0x8040b6 <__data_end>
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	99 cf       	rjmp	.-206    	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>

0000034a <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 34a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret

00000352 <DIGITAL_GLUE_LOGIC_0_init>:
 */
int8_t DIGITAL_GLUE_LOGIC_0_init()
{

	
	CCL.SEQCTRL0 = CCL_SEQSEL0_DFF_gc; /* D FlipFlop */
 352:	e0 ec       	ldi	r30, 0xC0	; 192
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	81 83       	std	Z+1, r24	; 0x01

	CCL.SEQCTRL1 = CCL_SEQSEL1_DFF_gc; /* D FlipFlop */
 35a:	82 83       	std	Z+2, r24	; 0x02

	CCL.SEQCTRL2 = CCL_SEQSEL2_DFF_gc; /* D FlipFlop */
 35c:	83 83       	std	Z+3, r24	; 0x03

	CCL.TRUTH0 = 238; /* Truth 0: 238 */
 35e:	9e ee       	ldi	r25, 0xEE	; 238
 360:	93 87       	std	Z+11, r25	; 0x0b

	CCL.LUT0CTRLC =CCL_INSEL2_EVENTA_gc; /* Event input source A */
 362:	93 e0       	ldi	r25, 0x03	; 3
 364:	92 87       	std	Z+10, r25	; 0x0a

	CCL.LUT0CTRLB = CCL_INSEL0_EVENTB_gc /* Event input source B */
 366:	24 e5       	ldi	r18, 0x54	; 84
 368:	21 87       	std	Z+9, r18	; 0x09
	| CCL_INSEL1_IO_gc;  /* IO pin LUTn-IN1 input source */

	CCL.LUT0CTRLA = CCL_CLKSRC_IN2_gc    /* CLK_PER is clocking the LUT */
 36a:	33 e4       	ldi	r19, 0x43	; 67
 36c:	30 87       	std	Z+8, r19	; 0x08
	| CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	| CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	| 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	| 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */
	
	CCL.TRUTH1 = 0x10; /* Truth 1: 84 */
 36e:	20 e1       	ldi	r18, 0x10	; 16
 370:	27 87       	std	Z+15, r18	; 0x0f

	CCL.LUT1CTRLC = CCL_INSEL2_IO_gc; /* Masked input */
 372:	65 e0       	ldi	r22, 0x05	; 5
 374:	66 87       	std	Z+14, r22	; 0x0e

	//	CCL.LUT1CTRLB = CCL_INSEL0_MASK_gc /* Masked input */
	//	| CCL_INSEL1_IO_gc; /* Masked input */

	CCL.LUT1CTRLA = CCL_CLKSRC_CLKPER_gc     /* CLK_PER is clocking the LUT */
 376:	84 87       	std	Z+12, r24	; 0x0c
	| CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	| 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	| 0 << CCL_OUTEN_bp;     /* Output Enable: disabled */

	CCL.TRUTH2 = 204; /* Truth 2: 170 */
 378:	5c ec       	ldi	r21, 0xCC	; 204
 37a:	53 8b       	std	Z+19, r21	; 0x13

	CCL.LUT2CTRLC =  CCL_INSEL2_EVENTA_gc; /* Masked input */
 37c:	92 8b       	std	Z+18, r25	; 0x12

	CCL.LUT2CTRLB = CCL_INSEL0_MASK_gc /* Masked input */
 37e:	40 e4       	ldi	r20, 0x40	; 64
 380:	41 8b       	std	Z+17, r20	; 0x11
	|CCL_INSEL1_EVENTB_gc; /* Masked input */

	CCL.LUT2CTRLA = CCL_CLKSRC_IN2_gc    /* CLK_PER is clocking the LUT */
 382:	30 8b       	std	Z+16, r19	; 0x10
	| CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	| CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	| 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	| 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.TRUTH3 = 0x10; /* Truth 3: 84 */
 384:	27 8b       	std	Z+23, r18	; 0x17

	CCL.LUT3CTRLC = CCL_INSEL2_IO_gc; /* Masked input */
 386:	66 8b       	std	Z+22, r22	; 0x16

	//CCL.LUT3CTRLB = CCL_INSEL0_MASK_gc /* Masked input */
	//| CCL_INSEL1_IO_gc; /* Masked input */

	CCL.LUT3CTRLA = CCL_CLKSRC_CLKPER_gc /* CLK_PER is clocking the LUT */
 388:	84 8b       	std	Z+20, r24	; 0x14
	| CCL_EDGEDET_DIS_gc /* Edge detector is disabled */
	| CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	| 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	| 0 << CCL_OUTEN_bp; /* Output Enable: disabled */

	CCL.TRUTH4 = 204; /* Truth 4: 0 */
 38a:	53 8f       	std	Z+27, r21	; 0x1b

	CCL.LUT4CTRLC =  CCL_INSEL2_EVENTA_gc; /* Masked input */
 38c:	92 8f       	std	Z+26, r25	; 0x1a

	CCL.LUT4CTRLB = CCL_INSEL0_MASK_gc /* Masked input */
 38e:	41 8f       	std	Z+25, r20	; 0x19
	| CCL_INSEL1_EVENTB_gc; /* Masked input */

	CCL.LUT4CTRLA = CCL_CLKSRC_IN2_gc     /* CLK_PER is clocking the LUT */
 390:	30 8f       	std	Z+24, r19	; 0x18
	| CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	| CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	| 1 << CCL_ENABLE_bp     /* LUT Enable: disabled */
	| 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.TRUTH5 =0x10; /* Truth 5: 0 */
 392:	27 8f       	std	Z+31, r18	; 0x1f

	CCL.LUT5CTRLC =  CCL_INSEL2_EVENTA_gc; /* Masked input */
 394:	96 8f       	std	Z+30, r25	; 0x1e

	//CCL.LUT5CTRLB = CCL_INSEL0_EVENTA_gc /* Masked input */
	//|CCL_INSEL1_MASK_gc; /* Masked input */

	CCL.LUT5CTRLA = CCL_CLKSRC_CLKPER_gc /* CLK_PER is clocking the LUT */
 396:	84 8f       	std	Z+28, r24	; 0x1c
	| CCL_EDGEDET_DIS_gc /* Edge detector is disabled */
	| CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	| 1 << CCL_ENABLE_bp /* LUT Enable: disabled */
	| 0 << CCL_OUTEN_bp; /* Output Enable: disabled */

	CCL.CTRLA = 1 << CCL_ENABLE_bp      /* Enable: enabled */
 398:	80 83       	st	Z, r24

	// CCL.INTCTRL1 = CCL_INTMODE4_BOTH_gc /* Sense both edges */
	//		 | CCL_INTMODE5_BOTH_gc; /* Sense both edges */

	return 0;
}
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret

0000039e <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 39e:	43 e0       	ldi	r20, 0x03	; 3
 3a0:	68 ed       	ldi	r22, 0xD8	; 216
 3a2:	81 e6       	ldi	r24, 0x61	; 97
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 8e 02 	call	0x51c	; 0x51c <protected_write_io>
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret

000003ae <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 3ae:	78 94       	sei

	return 0;
}
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	08 95       	ret

000003b4 <mcu_init>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 3b4:	e0 e1       	ldi	r30, 0x10	; 16
 3b6:	f4 e0       	ldi	r31, 0x04	; 4
 3b8:	80 81       	ld	r24, Z
 3ba:	88 60       	ori	r24, 0x08	; 8
 3bc:	81 93       	st	Z+, r24
 3be:	e8 31       	cpi	r30, 0x18	; 24
 3c0:	84 e0       	ldi	r24, 0x04	; 4
 3c2:	f8 07       	cpc	r31, r24
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <mcu_init+0x4>
 3c6:	e0 e3       	ldi	r30, 0x30	; 48
 3c8:	f4 e0       	ldi	r31, 0x04	; 4
 3ca:	80 81       	ld	r24, Z
 3cc:	88 60       	ori	r24, 0x08	; 8
 3ce:	81 93       	st	Z+, r24
 3d0:	e8 33       	cpi	r30, 0x38	; 56
 3d2:	84 e0       	ldi	r24, 0x04	; 4
 3d4:	f8 07       	cpc	r31, r24
 3d6:	c9 f7       	brne	.-14     	; 0x3ca <mcu_init+0x16>
 3d8:	e0 e5       	ldi	r30, 0x50	; 80
 3da:	f4 e0       	ldi	r31, 0x04	; 4
 3dc:	80 81       	ld	r24, Z
 3de:	88 60       	ori	r24, 0x08	; 8
 3e0:	81 93       	st	Z+, r24
 3e2:	e8 35       	cpi	r30, 0x58	; 88
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	f8 07       	cpc	r31, r24
 3e8:	c9 f7       	brne	.-14     	; 0x3dc <mcu_init+0x28>
 3ea:	e0 e7       	ldi	r30, 0x70	; 112
 3ec:	f4 e0       	ldi	r31, 0x04	; 4
 3ee:	80 81       	ld	r24, Z
 3f0:	88 60       	ori	r24, 0x08	; 8
 3f2:	81 93       	st	Z+, r24
 3f4:	e8 37       	cpi	r30, 0x78	; 120
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	f8 07       	cpc	r31, r24
 3fa:	c9 f7       	brne	.-14     	; 0x3ee <mcu_init+0x3a>
 3fc:	e0 e9       	ldi	r30, 0x90	; 144
 3fe:	f4 e0       	ldi	r31, 0x04	; 4
 400:	80 81       	ld	r24, Z
 402:	88 60       	ori	r24, 0x08	; 8
 404:	81 93       	st	Z+, r24
 406:	e8 39       	cpi	r30, 0x98	; 152
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	f8 07       	cpc	r31, r24
 40c:	c9 f7       	brne	.-14     	; 0x400 <__LOCK_REGION_LENGTH__>
 40e:	e0 eb       	ldi	r30, 0xB0	; 176
 410:	f4 e0       	ldi	r31, 0x04	; 4
 412:	80 81       	ld	r24, Z
 414:	88 60       	ori	r24, 0x08	; 8
 416:	81 93       	st	Z+, r24
 418:	e8 3b       	cpi	r30, 0xB8	; 184
 41a:	84 e0       	ldi	r24, 0x04	; 4
 41c:	f8 07       	cpc	r31, r24
 41e:	c9 f7       	brne	.-14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 420:	e0 ed       	ldi	r30, 0xD0	; 208
 422:	f4 e0       	ldi	r31, 0x04	; 4
 424:	80 81       	ld	r24, Z
 426:	88 60       	ori	r24, 0x08	; 8
 428:	81 93       	st	Z+, r24
 42a:	e8 3d       	cpi	r30, 0xD8	; 216
 42c:	84 e0       	ldi	r24, 0x04	; 4
 42e:	f8 07       	cpc	r31, r24
 430:	c9 f7       	brne	.-14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 432:	08 95       	ret

00000434 <USART_0_initialization>:
 434:	41 98       	cbi	0x08, 1	; 8
 436:	e1 e5       	ldi	r30, 0x51	; 81
 438:	f4 e0       	ldi	r31, 0x04	; 4
 43a:	80 81       	ld	r24, Z
 43c:	87 7f       	andi	r24, 0xF7	; 247
 43e:	80 83       	st	Z, r24
 440:	40 9a       	sbi	0x08, 0	; 8
 442:	48 98       	cbi	0x09, 0	; 9
 444:	0e 94 a5 02 	call	0x54a	; 0x54a <USART_0_init>
 448:	08 95       	ret

0000044a <TIMER_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 44a:	24 9a       	sbi	0x04, 4	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 44c:	2c 98       	cbi	0x05, 4	; 5
	    // <true"> High
	    false);

	/* set the alternate pin mux */

	PORTMUX.TCBROUTEA |= PORTMUX_TCB2_bm;
 44e:	e0 ee       	ldi	r30, 0xE0	; 224
 450:	f5 e0       	ldi	r31, 0x05	; 5
 452:	87 81       	ldd	r24, Z+7	; 0x07
 454:	84 60       	ori	r24, 0x04	; 4
 456:	87 83       	std	Z+7, r24	; 0x07

	TIMER_0_init();
 458:	0e 94 95 02 	call	0x52a	; 0x52a <TIMER_0_init>
 45c:	08 95       	ret

0000045e <DIGITAL_GLUE_LOGIC_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 45e:	01 9a       	sbi	0x00, 1	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
 460:	09 9a       	sbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 462:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 464:	0b 98       	cbi	0x01, 3	; 1
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 466:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 468:	e2 e5       	ldi	r30, 0x52	; 82
 46a:	f4 e0       	ldi	r31, 0x04	; 4
 46c:	80 81       	ld	r24, Z
 46e:	88 60       	ori	r24, 0x08	; 8
 470:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 472:	63 9a       	sbi	0x0c, 3	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 474:	6b 98       	cbi	0x0d, 3	; 13
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
 476:	a2 98       	cbi	0x14, 2	; 20
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 478:	e2 eb       	ldi	r30, 0xB2	; 178
 47a:	f4 e0       	ldi	r31, 0x04	; 4
 47c:	80 81       	ld	r24, Z
 47e:	88 60       	ori	r24, 0x08	; 8
 480:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 482:	23 9a       	sbi	0x04, 3	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 484:	2b 98       	cbi	0x05, 3	; 5
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 486:	02 98       	cbi	0x00, 2	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 488:	e2 e1       	ldi	r30, 0x12	; 18
 48a:	f4 e0       	ldi	r31, 0x04	; 4
 48c:	80 81       	ld	r24, Z
 48e:	88 60       	ori	r24, 0x08	; 8
 490:	80 83       	st	Z, r24
	// <id> pad_pull_config
	// <PORT_PULL_OFF"> Off
	// <PORT_PULL_UP"> Pull-up
	PORT_PULL_UP);

	DIGITAL_GLUE_LOGIC_0_init();
 492:	0e 94 a9 01 	call	0x352	; 0x352 <DIGITAL_GLUE_LOGIC_0_init>
 496:	08 95       	ret

00000498 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 498:	0e 94 da 01 	call	0x3b4	; 0x3b4 <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 49c:	46 9a       	sbi	0x08, 6	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 49e:	4e 98       	cbi	0x09, 6	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 4a0:	47 9a       	sbi	0x08, 7	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 4a2:	4f 98       	cbi	0x09, 7	; 9
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 4a4:	e7 e5       	ldi	r30, 0x57	; 87
 4a6:	f4 e0       	ldi	r31, 0x04	; 4
 4a8:	80 81       	ld	r24, Z
 4aa:	88 60       	ori	r24, 0x08	; 8
 4ac:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
 4ae:	80 81       	ld	r24, Z
 4b0:	8f 77       	andi	r24, 0x7F	; 127
 4b2:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 4b4:	80 81       	ld	r24, Z
 4b6:	88 7f       	andi	r24, 0xF8	; 248
 4b8:	82 60       	ori	r24, 0x02	; 2
 4ba:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_RISING_gc);

	CLKCTRL_init();
 4bc:	0e 94 cf 01 	call	0x39e	; 0x39e <CLKCTRL_init>

	USART_0_initialization();
 4c0:	0e 94 1a 02 	call	0x434	; 0x434 <USART_0_initialization>
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 4c4:	0e 94 6f 02 	call	0x4de	; 0x4de <EVENT_SYSTEM_0_init>

	USART_0_initialization();

	EVENT_SYSTEM_0_initialization();

	SLPCTRL_init();
 4c8:	0e 94 93 02 	call	0x526	; 0x526 <SLPCTRL_init>

	CPUINT_init();
 4cc:	0e 94 d7 01 	call	0x3ae	; 0x3ae <CPUINT_init>

	BOD_init();
 4d0:	0e 94 a5 01 	call	0x34a	; 0x34a <BOD_init>

	TIMER_0_initialization();
 4d4:	0e 94 25 02 	call	0x44a	; 0x44a <TIMER_0_initialization>

	DIGITAL_GLUE_LOGIC_0_initialization();
 4d8:	0e 94 2f 02 	call	0x45e	; 0x45e <DIGITAL_GLUE_LOGIC_0_initialization>
 4dc:	08 95       	ret

000004de <EVENT_SYSTEM_0_init>:
 *
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{
EVSYS.CHANNEL0 = EVSYS_CHANNEL0_PORTA_PIN2_gc; /* Port A Pin 2 */
 4de:	e0 e0       	ldi	r30, 0x00	; 0
 4e0:	f2 e0       	ldi	r31, 0x02	; 2
 4e2:	82 e4       	ldi	r24, 0x42	; 66
 4e4:	80 8b       	std	Z+16, r24	; 0x10

// EVSYS.CHANNEL1 = EVSYS_CHANNEL1_OFF_gc; /* Off */

EVSYS.CHANNEL2 = EVSYS_CHANNEL2_PORTC_PIN7_gc; /* Port C Pin 7 */
 4e6:	87 e4       	ldi	r24, 0x47	; 71
 4e8:	82 8b       	std	Z+18, r24	; 0x12

EVSYS.CHANNEL3 = EVSYS_CHANNEL3_TCB2_CAPT_gc; /* Timer/Counter B2 capture */
 4ea:	84 ea       	ldi	r24, 0xA4	; 164
 4ec:	83 8b       	std	Z+19, r24	; 0x13

EVSYS.CHANNEL4 = EVSYS_CHANNEL4_CCL_LUT0_gc; /* Configurable Custom Logic LUT0 */
 4ee:	80 e1       	ldi	r24, 0x10	; 16
 4f0:	84 8b       	std	Z+20, r24	; 0x14

EVSYS.CHANNEL5 = EVSYS_CHANNEL5_CCL_LUT2_gc; /* Configurable Custom Logic LUT2 */
 4f2:	82 e1       	ldi	r24, 0x12	; 18
 4f4:	85 8b       	std	Z+21, r24	; 0x15

EVSYS.CHANNEL6 = EVSYS_CHANNEL6_CCL_LUT4_gc; /* Configurable Custom Logic LUT4 */
 4f6:	84 e1       	ldi	r24, 0x14	; 20
 4f8:	86 8b       	std	Z+22, r24	; 0x16

// EVSYS.CHANNEL8 = EVSYS_CHANNEL8_OFF_gc; /* Off */

// EVSYS.CHANNEL9 = EVSYS_CHANNEL9_OFF_gc; /* Off */

EVSYS.USERCCLLUT0A = EVSYS_USER_CHANNEL3_gc; /* Off */
 4fa:	84 e0       	ldi	r24, 0x04	; 4
 4fc:	80 a3       	std	Z+32, r24	; 0x20

// EVSYS.USERCCLLUT1A = EVSYS_USER_OFF_gc; /* Off */

EVSYS.USERCCLLUT2A = EVSYS_USER_CHANNEL3_gc; /* Off */
 4fe:	84 a3       	std	Z+36, r24	; 0x24

// EVSYS.USERCCLLUT3A = EVSYS_USER_OFF_gc; /* Off */

EVSYS.USERCCLLUT4A = EVSYS_USER_CHANNEL3_gc; /* Off */
 500:	80 a7       	std	Z+40, r24	; 0x28

EVSYS.USERCCLLUT5A = EVSYS_USER_CHANNEL0_gc; /* Off */
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	82 a7       	std	Z+42, r24	; 0x2a

EVSYS.USERCCLLUT0B = EVSYS_USER_CHANNEL6_gc; /* Off */
 506:	87 e0       	ldi	r24, 0x07	; 7
 508:	81 a3       	std	Z+33, r24	; 0x21

// EVSYS.USERCCLLUT1B = EVSYS_USER_OFF_gc; /* Off */

EVSYS.USERCCLLUT2B = EVSYS_USER_CHANNEL4_gc; /* Off */
 50a:	85 e0       	ldi	r24, 0x05	; 5
 50c:	85 a3       	std	Z+37, r24	; 0x25

// EVSYS.USERCCLLUT3B = EVSYS_USER_OFF_gc; /* Off */

EVSYS.USERCCLLUT4B = EVSYS_USER_CHANNEL5_gc; /* Off */
 50e:	86 e0       	ldi	r24, 0x06	; 6
 510:	81 a7       	std	Z+41, r24	; 0x29

// EVSYS.USERTCB1CAPT = EVSYS_USER_OFF_gc; /* Off */

// EVSYS.USERTCB1COUNT = EVSYS_USER_OFF_gc; /* Off */

EVSYS.USERTCB2CAPT = EVSYS_USER_CHANNEL2_gc; /* Connect user to event channel 2 */
 512:	83 e0       	ldi	r24, 0x03	; 3
 514:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <__TEXT_REGION_LENGTH__+0x7e0243>
// EVSYS.USERTCD0INPUTA = EVSYS_USER_OFF_gc; /* Off */

// EVSYS.USERTCD0INPUTB = EVSYS_USER_OFF_gc; /* Off */

return 0;
}
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	08 95       	ret

0000051c <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 51c:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 51e:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 520:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 522:	40 83       	st	Z, r20
	ret                             // Return to caller
 524:	08 95       	ret

00000526 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	08 95       	ret

0000052a <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCB2.CCMP = 0xfff; /* Compare or Capture: 0xfff */
 52a:	e0 e2       	ldi	r30, 0x20	; 32
 52c:	fb e0       	ldi	r31, 0x0B	; 11
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	9f e0       	ldi	r25, 0x0F	; 15
 532:	84 87       	std	Z+12, r24	; 0x0c
 534:	95 87       	std	Z+13, r25	; 0x0d

    TCB2.CNT = 0x0; /* Count: 0x0 */
 536:	12 86       	std	Z+10, r1	; 0x0a
 538:	13 86       	std	Z+11, r1	; 0x0b

	TCB2.CTRLB = 0 << TCB_ASYNC_bp        /* Asynchronous Enable: disabled */
 53a:	86 e1       	ldi	r24, 0x16	; 22
 53c:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPINIT_bp   /* Pin Initial State: disabled */
	             | TCB_CNTMODE_SINGLE_gc; /* Single Shot */

	// TCB2.DBGCTRL = 0 << TCB_DBGRUN_bp; /* Debug Run: disabled */

	TCB2.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	// TCB2.INTCTRL = 0 << TCB_CAPT_bp /* Capture or Timeout: disabled */
	//		 | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB2.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER/2 (From Prescaler) */
 542:	83 e0       	ldi	r24, 0x03	; 3
 544:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	08 95       	ret

0000054a <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART1.STATUS & USART_RXCIF_bm))
		;
	return USART1.RXDATAL;
}
 54a:	e0 e2       	ldi	r30, 0x20	; 32
 54c:	f8 e0       	ldi	r31, 0x08	; 8
 54e:	81 ea       	ldi	r24, 0xA1	; 161
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	80 87       	std	Z+8, r24	; 0x08
 554:	91 87       	std	Z+9, r25	; 0x09
 556:	80 ec       	ldi	r24, 0xC0	; 192
 558:	86 83       	std	Z+6, r24	; 0x06
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	90 e4       	ldi	r25, 0x40	; 64
 55e:	80 93 ba 40 	sts	0x40BA, r24	; 0x8040ba <__iob+0x2>
 562:	90 93 bb 40 	sts	0x40BB, r25	; 0x8040bb <__iob+0x3>
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	08 95       	ret

0000056a <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART1.STATUS & USART_DREIF_bm))
 56a:	e0 e2       	ldi	r30, 0x20	; 32
 56c:	f8 e0       	ldi	r31, 0x08	; 8
 56e:	94 81       	ldd	r25, Z+4	; 0x04
 570:	95 ff       	sbrs	r25, 5
 572:	fd cf       	rjmp	.-6      	; 0x56e <USART_0_write+0x4>
		;
	USART1.TXDATAL = data;
 574:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
 578:	08 95       	ret

0000057a <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 57a:	0e 94 b5 02 	call	0x56a	; 0x56a <USART_0_write>
	return 0;
}
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	08 95       	ret

00000584 <printf>:
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	ae 01       	movw	r20, r28
 58e:	4b 5f       	subi	r20, 0xFB	; 251
 590:	5f 4f       	sbci	r21, 0xFF	; 255
 592:	fa 01       	movw	r30, r20
 594:	61 91       	ld	r22, Z+
 596:	71 91       	ld	r23, Z+
 598:	af 01       	movw	r20, r30
 59a:	80 91 ba 40 	lds	r24, 0x40BA	; 0x8040ba <__iob+0x2>
 59e:	90 91 bb 40 	lds	r25, 0x40BB	; 0x8040bb <__iob+0x3>
 5a2:	0e 94 06 03 	call	0x60c	; 0x60c <vfprintf>
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <puts>:
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	e0 91 ba 40 	lds	r30, 0x40BA	; 0x8040ba <__iob+0x2>
 5b8:	f0 91 bb 40 	lds	r31, 0x40BB	; 0x8040bb <__iob+0x3>
 5bc:	23 81       	ldd	r18, Z+3	; 0x03
 5be:	21 ff       	sbrs	r18, 1
 5c0:	1b c0       	rjmp	.+54     	; 0x5f8 <puts+0x4c>
 5c2:	8c 01       	movw	r16, r24
 5c4:	d0 e0       	ldi	r29, 0x00	; 0
 5c6:	c0 e0       	ldi	r28, 0x00	; 0
 5c8:	f8 01       	movw	r30, r16
 5ca:	81 91       	ld	r24, Z+
 5cc:	8f 01       	movw	r16, r30
 5ce:	60 91 ba 40 	lds	r22, 0x40BA	; 0x8040ba <__iob+0x2>
 5d2:	70 91 bb 40 	lds	r23, 0x40BB	; 0x8040bb <__iob+0x3>
 5d6:	db 01       	movw	r26, r22
 5d8:	18 96       	adiw	r26, 0x08	; 8
 5da:	ed 91       	ld	r30, X+
 5dc:	fc 91       	ld	r31, X
 5de:	19 97       	sbiw	r26, 0x09	; 9
 5e0:	88 23       	and	r24, r24
 5e2:	31 f0       	breq	.+12     	; 0x5f0 <puts+0x44>
 5e4:	09 95       	icall
 5e6:	89 2b       	or	r24, r25
 5e8:	79 f3       	breq	.-34     	; 0x5c8 <puts+0x1c>
 5ea:	df ef       	ldi	r29, 0xFF	; 255
 5ec:	cf ef       	ldi	r28, 0xFF	; 255
 5ee:	ec cf       	rjmp	.-40     	; 0x5c8 <puts+0x1c>
 5f0:	8a e0       	ldi	r24, 0x0A	; 10
 5f2:	09 95       	icall
 5f4:	89 2b       	or	r24, r25
 5f6:	19 f0       	breq	.+6      	; 0x5fe <puts+0x52>
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	9f ef       	ldi	r25, 0xFF	; 255
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <puts+0x56>
 5fe:	8d 2f       	mov	r24, r29
 600:	9c 2f       	mov	r25, r28
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	1f 91       	pop	r17
 608:	0f 91       	pop	r16
 60a:	08 95       	ret

0000060c <vfprintf>:
 60c:	2f 92       	push	r2
 60e:	3f 92       	push	r3
 610:	4f 92       	push	r4
 612:	5f 92       	push	r5
 614:	6f 92       	push	r6
 616:	7f 92       	push	r7
 618:	8f 92       	push	r8
 61a:	9f 92       	push	r9
 61c:	af 92       	push	r10
 61e:	bf 92       	push	r11
 620:	cf 92       	push	r12
 622:	df 92       	push	r13
 624:	ef 92       	push	r14
 626:	ff 92       	push	r15
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	cd b7       	in	r28, 0x3d	; 61
 632:	de b7       	in	r29, 0x3e	; 62
 634:	2b 97       	sbiw	r28, 0x0b	; 11
 636:	cd bf       	out	0x3d, r28	; 61
 638:	de bf       	out	0x3e, r29	; 62
 63a:	6c 01       	movw	r12, r24
 63c:	7b 01       	movw	r14, r22
 63e:	8a 01       	movw	r16, r20
 640:	fc 01       	movw	r30, r24
 642:	16 82       	std	Z+6, r1	; 0x06
 644:	17 82       	std	Z+7, r1	; 0x07
 646:	83 81       	ldd	r24, Z+3	; 0x03
 648:	81 ff       	sbrs	r24, 1
 64a:	cc c1       	rjmp	.+920    	; 0x9e4 <vfprintf+0x3d8>
 64c:	ce 01       	movw	r24, r28
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	3c 01       	movw	r6, r24
 652:	f6 01       	movw	r30, r12
 654:	93 81       	ldd	r25, Z+3	; 0x03
 656:	f7 01       	movw	r30, r14
 658:	93 fd       	sbrc	r25, 3
 65a:	85 91       	lpm	r24, Z+
 65c:	93 ff       	sbrs	r25, 3
 65e:	81 91       	ld	r24, Z+
 660:	7f 01       	movw	r14, r30
 662:	88 23       	and	r24, r24
 664:	09 f4       	brne	.+2      	; 0x668 <vfprintf+0x5c>
 666:	ba c1       	rjmp	.+884    	; 0x9dc <vfprintf+0x3d0>
 668:	85 32       	cpi	r24, 0x25	; 37
 66a:	39 f4       	brne	.+14     	; 0x67a <vfprintf+0x6e>
 66c:	93 fd       	sbrc	r25, 3
 66e:	85 91       	lpm	r24, Z+
 670:	93 ff       	sbrs	r25, 3
 672:	81 91       	ld	r24, Z+
 674:	7f 01       	movw	r14, r30
 676:	85 32       	cpi	r24, 0x25	; 37
 678:	29 f4       	brne	.+10     	; 0x684 <vfprintf+0x78>
 67a:	b6 01       	movw	r22, r12
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 682:	e7 cf       	rjmp	.-50     	; 0x652 <vfprintf+0x46>
 684:	91 2c       	mov	r9, r1
 686:	21 2c       	mov	r2, r1
 688:	31 2c       	mov	r3, r1
 68a:	ff e1       	ldi	r31, 0x1F	; 31
 68c:	f3 15       	cp	r31, r3
 68e:	d8 f0       	brcs	.+54     	; 0x6c6 <vfprintf+0xba>
 690:	8b 32       	cpi	r24, 0x2B	; 43
 692:	79 f0       	breq	.+30     	; 0x6b2 <vfprintf+0xa6>
 694:	38 f4       	brcc	.+14     	; 0x6a4 <vfprintf+0x98>
 696:	80 32       	cpi	r24, 0x20	; 32
 698:	79 f0       	breq	.+30     	; 0x6b8 <vfprintf+0xac>
 69a:	83 32       	cpi	r24, 0x23	; 35
 69c:	a1 f4       	brne	.+40     	; 0x6c6 <vfprintf+0xba>
 69e:	23 2d       	mov	r18, r3
 6a0:	20 61       	ori	r18, 0x10	; 16
 6a2:	1d c0       	rjmp	.+58     	; 0x6de <vfprintf+0xd2>
 6a4:	8d 32       	cpi	r24, 0x2D	; 45
 6a6:	61 f0       	breq	.+24     	; 0x6c0 <vfprintf+0xb4>
 6a8:	80 33       	cpi	r24, 0x30	; 48
 6aa:	69 f4       	brne	.+26     	; 0x6c6 <vfprintf+0xba>
 6ac:	23 2d       	mov	r18, r3
 6ae:	21 60       	ori	r18, 0x01	; 1
 6b0:	16 c0       	rjmp	.+44     	; 0x6de <vfprintf+0xd2>
 6b2:	83 2d       	mov	r24, r3
 6b4:	82 60       	ori	r24, 0x02	; 2
 6b6:	38 2e       	mov	r3, r24
 6b8:	e3 2d       	mov	r30, r3
 6ba:	e4 60       	ori	r30, 0x04	; 4
 6bc:	3e 2e       	mov	r3, r30
 6be:	2a c0       	rjmp	.+84     	; 0x714 <vfprintf+0x108>
 6c0:	f3 2d       	mov	r31, r3
 6c2:	f8 60       	ori	r31, 0x08	; 8
 6c4:	1d c0       	rjmp	.+58     	; 0x700 <vfprintf+0xf4>
 6c6:	37 fc       	sbrc	r3, 7
 6c8:	2d c0       	rjmp	.+90     	; 0x724 <vfprintf+0x118>
 6ca:	20 ed       	ldi	r18, 0xD0	; 208
 6cc:	28 0f       	add	r18, r24
 6ce:	2a 30       	cpi	r18, 0x0A	; 10
 6d0:	40 f0       	brcs	.+16     	; 0x6e2 <vfprintf+0xd6>
 6d2:	8e 32       	cpi	r24, 0x2E	; 46
 6d4:	b9 f4       	brne	.+46     	; 0x704 <vfprintf+0xf8>
 6d6:	36 fc       	sbrc	r3, 6
 6d8:	81 c1       	rjmp	.+770    	; 0x9dc <vfprintf+0x3d0>
 6da:	23 2d       	mov	r18, r3
 6dc:	20 64       	ori	r18, 0x40	; 64
 6de:	32 2e       	mov	r3, r18
 6e0:	19 c0       	rjmp	.+50     	; 0x714 <vfprintf+0x108>
 6e2:	36 fe       	sbrs	r3, 6
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <vfprintf+0xe6>
 6e6:	8a e0       	ldi	r24, 0x0A	; 10
 6e8:	98 9e       	mul	r9, r24
 6ea:	20 0d       	add	r18, r0
 6ec:	11 24       	eor	r1, r1
 6ee:	92 2e       	mov	r9, r18
 6f0:	11 c0       	rjmp	.+34     	; 0x714 <vfprintf+0x108>
 6f2:	ea e0       	ldi	r30, 0x0A	; 10
 6f4:	2e 9e       	mul	r2, r30
 6f6:	20 0d       	add	r18, r0
 6f8:	11 24       	eor	r1, r1
 6fa:	22 2e       	mov	r2, r18
 6fc:	f3 2d       	mov	r31, r3
 6fe:	f0 62       	ori	r31, 0x20	; 32
 700:	3f 2e       	mov	r3, r31
 702:	08 c0       	rjmp	.+16     	; 0x714 <vfprintf+0x108>
 704:	8c 36       	cpi	r24, 0x6C	; 108
 706:	21 f4       	brne	.+8      	; 0x710 <vfprintf+0x104>
 708:	83 2d       	mov	r24, r3
 70a:	80 68       	ori	r24, 0x80	; 128
 70c:	38 2e       	mov	r3, r24
 70e:	02 c0       	rjmp	.+4      	; 0x714 <vfprintf+0x108>
 710:	88 36       	cpi	r24, 0x68	; 104
 712:	41 f4       	brne	.+16     	; 0x724 <vfprintf+0x118>
 714:	f7 01       	movw	r30, r14
 716:	93 fd       	sbrc	r25, 3
 718:	85 91       	lpm	r24, Z+
 71a:	93 ff       	sbrs	r25, 3
 71c:	81 91       	ld	r24, Z+
 71e:	7f 01       	movw	r14, r30
 720:	81 11       	cpse	r24, r1
 722:	b3 cf       	rjmp	.-154    	; 0x68a <vfprintf+0x7e>
 724:	98 2f       	mov	r25, r24
 726:	9f 7d       	andi	r25, 0xDF	; 223
 728:	95 54       	subi	r25, 0x45	; 69
 72a:	93 30       	cpi	r25, 0x03	; 3
 72c:	28 f4       	brcc	.+10     	; 0x738 <vfprintf+0x12c>
 72e:	0c 5f       	subi	r16, 0xFC	; 252
 730:	1f 4f       	sbci	r17, 0xFF	; 255
 732:	9f e3       	ldi	r25, 0x3F	; 63
 734:	99 83       	std	Y+1, r25	; 0x01
 736:	0d c0       	rjmp	.+26     	; 0x752 <vfprintf+0x146>
 738:	83 36       	cpi	r24, 0x63	; 99
 73a:	31 f0       	breq	.+12     	; 0x748 <vfprintf+0x13c>
 73c:	83 37       	cpi	r24, 0x73	; 115
 73e:	71 f0       	breq	.+28     	; 0x75c <vfprintf+0x150>
 740:	83 35       	cpi	r24, 0x53	; 83
 742:	09 f0       	breq	.+2      	; 0x746 <vfprintf+0x13a>
 744:	59 c0       	rjmp	.+178    	; 0x7f8 <vfprintf+0x1ec>
 746:	21 c0       	rjmp	.+66     	; 0x78a <vfprintf+0x17e>
 748:	f8 01       	movw	r30, r16
 74a:	80 81       	ld	r24, Z
 74c:	89 83       	std	Y+1, r24	; 0x01
 74e:	0e 5f       	subi	r16, 0xFE	; 254
 750:	1f 4f       	sbci	r17, 0xFF	; 255
 752:	88 24       	eor	r8, r8
 754:	83 94       	inc	r8
 756:	91 2c       	mov	r9, r1
 758:	53 01       	movw	r10, r6
 75a:	13 c0       	rjmp	.+38     	; 0x782 <vfprintf+0x176>
 75c:	28 01       	movw	r4, r16
 75e:	f2 e0       	ldi	r31, 0x02	; 2
 760:	4f 0e       	add	r4, r31
 762:	51 1c       	adc	r5, r1
 764:	f8 01       	movw	r30, r16
 766:	a0 80       	ld	r10, Z
 768:	b1 80       	ldd	r11, Z+1	; 0x01
 76a:	36 fe       	sbrs	r3, 6
 76c:	03 c0       	rjmp	.+6      	; 0x774 <vfprintf+0x168>
 76e:	69 2d       	mov	r22, r9
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <vfprintf+0x16c>
 774:	6f ef       	ldi	r22, 0xFF	; 255
 776:	7f ef       	ldi	r23, 0xFF	; 255
 778:	c5 01       	movw	r24, r10
 77a:	0e 94 15 05 	call	0xa2a	; 0xa2a <strnlen>
 77e:	4c 01       	movw	r8, r24
 780:	82 01       	movw	r16, r4
 782:	f3 2d       	mov	r31, r3
 784:	ff 77       	andi	r31, 0x7F	; 127
 786:	3f 2e       	mov	r3, r31
 788:	16 c0       	rjmp	.+44     	; 0x7b6 <vfprintf+0x1aa>
 78a:	28 01       	movw	r4, r16
 78c:	22 e0       	ldi	r18, 0x02	; 2
 78e:	42 0e       	add	r4, r18
 790:	51 1c       	adc	r5, r1
 792:	f8 01       	movw	r30, r16
 794:	a0 80       	ld	r10, Z
 796:	b1 80       	ldd	r11, Z+1	; 0x01
 798:	36 fe       	sbrs	r3, 6
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <vfprintf+0x196>
 79c:	69 2d       	mov	r22, r9
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <vfprintf+0x19a>
 7a2:	6f ef       	ldi	r22, 0xFF	; 255
 7a4:	7f ef       	ldi	r23, 0xFF	; 255
 7a6:	c5 01       	movw	r24, r10
 7a8:	0e 94 0a 05 	call	0xa14	; 0xa14 <strnlen_P>
 7ac:	4c 01       	movw	r8, r24
 7ae:	f3 2d       	mov	r31, r3
 7b0:	f0 68       	ori	r31, 0x80	; 128
 7b2:	3f 2e       	mov	r3, r31
 7b4:	82 01       	movw	r16, r4
 7b6:	33 fc       	sbrc	r3, 3
 7b8:	1b c0       	rjmp	.+54     	; 0x7f0 <vfprintf+0x1e4>
 7ba:	82 2d       	mov	r24, r2
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	88 16       	cp	r8, r24
 7c0:	99 06       	cpc	r9, r25
 7c2:	b0 f4       	brcc	.+44     	; 0x7f0 <vfprintf+0x1e4>
 7c4:	b6 01       	movw	r22, r12
 7c6:	80 e2       	ldi	r24, 0x20	; 32
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 7ce:	2a 94       	dec	r2
 7d0:	f4 cf       	rjmp	.-24     	; 0x7ba <vfprintf+0x1ae>
 7d2:	f5 01       	movw	r30, r10
 7d4:	37 fc       	sbrc	r3, 7
 7d6:	85 91       	lpm	r24, Z+
 7d8:	37 fe       	sbrs	r3, 7
 7da:	81 91       	ld	r24, Z+
 7dc:	5f 01       	movw	r10, r30
 7de:	b6 01       	movw	r22, r12
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 7e6:	21 10       	cpse	r2, r1
 7e8:	2a 94       	dec	r2
 7ea:	21 e0       	ldi	r18, 0x01	; 1
 7ec:	82 1a       	sub	r8, r18
 7ee:	91 08       	sbc	r9, r1
 7f0:	81 14       	cp	r8, r1
 7f2:	91 04       	cpc	r9, r1
 7f4:	71 f7       	brne	.-36     	; 0x7d2 <vfprintf+0x1c6>
 7f6:	e8 c0       	rjmp	.+464    	; 0x9c8 <vfprintf+0x3bc>
 7f8:	84 36       	cpi	r24, 0x64	; 100
 7fa:	11 f0       	breq	.+4      	; 0x800 <vfprintf+0x1f4>
 7fc:	89 36       	cpi	r24, 0x69	; 105
 7fe:	41 f5       	brne	.+80     	; 0x850 <vfprintf+0x244>
 800:	f8 01       	movw	r30, r16
 802:	37 fe       	sbrs	r3, 7
 804:	07 c0       	rjmp	.+14     	; 0x814 <vfprintf+0x208>
 806:	60 81       	ld	r22, Z
 808:	71 81       	ldd	r23, Z+1	; 0x01
 80a:	82 81       	ldd	r24, Z+2	; 0x02
 80c:	93 81       	ldd	r25, Z+3	; 0x03
 80e:	0c 5f       	subi	r16, 0xFC	; 252
 810:	1f 4f       	sbci	r17, 0xFF	; 255
 812:	08 c0       	rjmp	.+16     	; 0x824 <vfprintf+0x218>
 814:	60 81       	ld	r22, Z
 816:	71 81       	ldd	r23, Z+1	; 0x01
 818:	07 2e       	mov	r0, r23
 81a:	00 0c       	add	r0, r0
 81c:	88 0b       	sbc	r24, r24
 81e:	99 0b       	sbc	r25, r25
 820:	0e 5f       	subi	r16, 0xFE	; 254
 822:	1f 4f       	sbci	r17, 0xFF	; 255
 824:	f3 2d       	mov	r31, r3
 826:	ff 76       	andi	r31, 0x6F	; 111
 828:	3f 2e       	mov	r3, r31
 82a:	97 ff       	sbrs	r25, 7
 82c:	09 c0       	rjmp	.+18     	; 0x840 <vfprintf+0x234>
 82e:	90 95       	com	r25
 830:	80 95       	com	r24
 832:	70 95       	com	r23
 834:	61 95       	neg	r22
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	f0 68       	ori	r31, 0x80	; 128
 83e:	3f 2e       	mov	r3, r31
 840:	2a e0       	ldi	r18, 0x0A	; 10
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	a3 01       	movw	r20, r6
 846:	0e 94 5c 05 	call	0xab8	; 0xab8 <__ultoa_invert>
 84a:	88 2e       	mov	r8, r24
 84c:	86 18       	sub	r8, r6
 84e:	45 c0       	rjmp	.+138    	; 0x8da <vfprintf+0x2ce>
 850:	85 37       	cpi	r24, 0x75	; 117
 852:	31 f4       	brne	.+12     	; 0x860 <vfprintf+0x254>
 854:	23 2d       	mov	r18, r3
 856:	2f 7e       	andi	r18, 0xEF	; 239
 858:	b2 2e       	mov	r11, r18
 85a:	2a e0       	ldi	r18, 0x0A	; 10
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	25 c0       	rjmp	.+74     	; 0x8aa <vfprintf+0x29e>
 860:	93 2d       	mov	r25, r3
 862:	99 7f       	andi	r25, 0xF9	; 249
 864:	b9 2e       	mov	r11, r25
 866:	8f 36       	cpi	r24, 0x6F	; 111
 868:	c1 f0       	breq	.+48     	; 0x89a <vfprintf+0x28e>
 86a:	18 f4       	brcc	.+6      	; 0x872 <vfprintf+0x266>
 86c:	88 35       	cpi	r24, 0x58	; 88
 86e:	79 f0       	breq	.+30     	; 0x88e <vfprintf+0x282>
 870:	b5 c0       	rjmp	.+362    	; 0x9dc <vfprintf+0x3d0>
 872:	80 37       	cpi	r24, 0x70	; 112
 874:	19 f0       	breq	.+6      	; 0x87c <vfprintf+0x270>
 876:	88 37       	cpi	r24, 0x78	; 120
 878:	21 f0       	breq	.+8      	; 0x882 <vfprintf+0x276>
 87a:	b0 c0       	rjmp	.+352    	; 0x9dc <vfprintf+0x3d0>
 87c:	e9 2f       	mov	r30, r25
 87e:	e0 61       	ori	r30, 0x10	; 16
 880:	be 2e       	mov	r11, r30
 882:	b4 fe       	sbrs	r11, 4
 884:	0d c0       	rjmp	.+26     	; 0x8a0 <vfprintf+0x294>
 886:	fb 2d       	mov	r31, r11
 888:	f4 60       	ori	r31, 0x04	; 4
 88a:	bf 2e       	mov	r11, r31
 88c:	09 c0       	rjmp	.+18     	; 0x8a0 <vfprintf+0x294>
 88e:	34 fe       	sbrs	r3, 4
 890:	0a c0       	rjmp	.+20     	; 0x8a6 <vfprintf+0x29a>
 892:	29 2f       	mov	r18, r25
 894:	26 60       	ori	r18, 0x06	; 6
 896:	b2 2e       	mov	r11, r18
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <vfprintf+0x29a>
 89a:	28 e0       	ldi	r18, 0x08	; 8
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <vfprintf+0x29e>
 8a0:	20 e1       	ldi	r18, 0x10	; 16
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <vfprintf+0x29e>
 8a6:	20 e1       	ldi	r18, 0x10	; 16
 8a8:	32 e0       	ldi	r19, 0x02	; 2
 8aa:	f8 01       	movw	r30, r16
 8ac:	b7 fe       	sbrs	r11, 7
 8ae:	07 c0       	rjmp	.+14     	; 0x8be <vfprintf+0x2b2>
 8b0:	60 81       	ld	r22, Z
 8b2:	71 81       	ldd	r23, Z+1	; 0x01
 8b4:	82 81       	ldd	r24, Z+2	; 0x02
 8b6:	93 81       	ldd	r25, Z+3	; 0x03
 8b8:	0c 5f       	subi	r16, 0xFC	; 252
 8ba:	1f 4f       	sbci	r17, 0xFF	; 255
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <vfprintf+0x2be>
 8be:	60 81       	ld	r22, Z
 8c0:	71 81       	ldd	r23, Z+1	; 0x01
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 5f       	subi	r16, 0xFE	; 254
 8c8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ca:	a3 01       	movw	r20, r6
 8cc:	0e 94 5c 05 	call	0xab8	; 0xab8 <__ultoa_invert>
 8d0:	88 2e       	mov	r8, r24
 8d2:	86 18       	sub	r8, r6
 8d4:	fb 2d       	mov	r31, r11
 8d6:	ff 77       	andi	r31, 0x7F	; 127
 8d8:	3f 2e       	mov	r3, r31
 8da:	36 fe       	sbrs	r3, 6
 8dc:	0d c0       	rjmp	.+26     	; 0x8f8 <vfprintf+0x2ec>
 8de:	23 2d       	mov	r18, r3
 8e0:	2e 7f       	andi	r18, 0xFE	; 254
 8e2:	a2 2e       	mov	r10, r18
 8e4:	89 14       	cp	r8, r9
 8e6:	58 f4       	brcc	.+22     	; 0x8fe <vfprintf+0x2f2>
 8e8:	34 fe       	sbrs	r3, 4
 8ea:	0b c0       	rjmp	.+22     	; 0x902 <vfprintf+0x2f6>
 8ec:	32 fc       	sbrc	r3, 2
 8ee:	09 c0       	rjmp	.+18     	; 0x902 <vfprintf+0x2f6>
 8f0:	83 2d       	mov	r24, r3
 8f2:	8e 7e       	andi	r24, 0xEE	; 238
 8f4:	a8 2e       	mov	r10, r24
 8f6:	05 c0       	rjmp	.+10     	; 0x902 <vfprintf+0x2f6>
 8f8:	b8 2c       	mov	r11, r8
 8fa:	a3 2c       	mov	r10, r3
 8fc:	03 c0       	rjmp	.+6      	; 0x904 <vfprintf+0x2f8>
 8fe:	b8 2c       	mov	r11, r8
 900:	01 c0       	rjmp	.+2      	; 0x904 <vfprintf+0x2f8>
 902:	b9 2c       	mov	r11, r9
 904:	a4 fe       	sbrs	r10, 4
 906:	0f c0       	rjmp	.+30     	; 0x926 <vfprintf+0x31a>
 908:	fe 01       	movw	r30, r28
 90a:	e8 0d       	add	r30, r8
 90c:	f1 1d       	adc	r31, r1
 90e:	80 81       	ld	r24, Z
 910:	80 33       	cpi	r24, 0x30	; 48
 912:	21 f4       	brne	.+8      	; 0x91c <vfprintf+0x310>
 914:	9a 2d       	mov	r25, r10
 916:	99 7e       	andi	r25, 0xE9	; 233
 918:	a9 2e       	mov	r10, r25
 91a:	09 c0       	rjmp	.+18     	; 0x92e <vfprintf+0x322>
 91c:	a2 fe       	sbrs	r10, 2
 91e:	06 c0       	rjmp	.+12     	; 0x92c <vfprintf+0x320>
 920:	b3 94       	inc	r11
 922:	b3 94       	inc	r11
 924:	04 c0       	rjmp	.+8      	; 0x92e <vfprintf+0x322>
 926:	8a 2d       	mov	r24, r10
 928:	86 78       	andi	r24, 0x86	; 134
 92a:	09 f0       	breq	.+2      	; 0x92e <vfprintf+0x322>
 92c:	b3 94       	inc	r11
 92e:	a3 fc       	sbrc	r10, 3
 930:	11 c0       	rjmp	.+34     	; 0x954 <vfprintf+0x348>
 932:	a0 fe       	sbrs	r10, 0
 934:	06 c0       	rjmp	.+12     	; 0x942 <vfprintf+0x336>
 936:	b2 14       	cp	r11, r2
 938:	88 f4       	brcc	.+34     	; 0x95c <vfprintf+0x350>
 93a:	28 0c       	add	r2, r8
 93c:	92 2c       	mov	r9, r2
 93e:	9b 18       	sub	r9, r11
 940:	0e c0       	rjmp	.+28     	; 0x95e <vfprintf+0x352>
 942:	b2 14       	cp	r11, r2
 944:	60 f4       	brcc	.+24     	; 0x95e <vfprintf+0x352>
 946:	b6 01       	movw	r22, r12
 948:	80 e2       	ldi	r24, 0x20	; 32
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 950:	b3 94       	inc	r11
 952:	f7 cf       	rjmp	.-18     	; 0x942 <vfprintf+0x336>
 954:	b2 14       	cp	r11, r2
 956:	18 f4       	brcc	.+6      	; 0x95e <vfprintf+0x352>
 958:	2b 18       	sub	r2, r11
 95a:	02 c0       	rjmp	.+4      	; 0x960 <vfprintf+0x354>
 95c:	98 2c       	mov	r9, r8
 95e:	21 2c       	mov	r2, r1
 960:	a4 fe       	sbrs	r10, 4
 962:	10 c0       	rjmp	.+32     	; 0x984 <vfprintf+0x378>
 964:	b6 01       	movw	r22, r12
 966:	80 e3       	ldi	r24, 0x30	; 48
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 96e:	a2 fe       	sbrs	r10, 2
 970:	17 c0       	rjmp	.+46     	; 0x9a0 <vfprintf+0x394>
 972:	a1 fc       	sbrc	r10, 1
 974:	03 c0       	rjmp	.+6      	; 0x97c <vfprintf+0x370>
 976:	88 e7       	ldi	r24, 0x78	; 120
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	02 c0       	rjmp	.+4      	; 0x980 <vfprintf+0x374>
 97c:	88 e5       	ldi	r24, 0x58	; 88
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	b6 01       	movw	r22, r12
 982:	0c c0       	rjmp	.+24     	; 0x99c <vfprintf+0x390>
 984:	8a 2d       	mov	r24, r10
 986:	86 78       	andi	r24, 0x86	; 134
 988:	59 f0       	breq	.+22     	; 0x9a0 <vfprintf+0x394>
 98a:	a1 fe       	sbrs	r10, 1
 98c:	02 c0       	rjmp	.+4      	; 0x992 <vfprintf+0x386>
 98e:	8b e2       	ldi	r24, 0x2B	; 43
 990:	01 c0       	rjmp	.+2      	; 0x994 <vfprintf+0x388>
 992:	80 e2       	ldi	r24, 0x20	; 32
 994:	a7 fc       	sbrc	r10, 7
 996:	8d e2       	ldi	r24, 0x2D	; 45
 998:	b6 01       	movw	r22, r12
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9a0:	89 14       	cp	r8, r9
 9a2:	38 f4       	brcc	.+14     	; 0x9b2 <vfprintf+0x3a6>
 9a4:	b6 01       	movw	r22, r12
 9a6:	80 e3       	ldi	r24, 0x30	; 48
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9ae:	9a 94       	dec	r9
 9b0:	f7 cf       	rjmp	.-18     	; 0x9a0 <vfprintf+0x394>
 9b2:	8a 94       	dec	r8
 9b4:	f3 01       	movw	r30, r6
 9b6:	e8 0d       	add	r30, r8
 9b8:	f1 1d       	adc	r31, r1
 9ba:	80 81       	ld	r24, Z
 9bc:	b6 01       	movw	r22, r12
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9c4:	81 10       	cpse	r8, r1
 9c6:	f5 cf       	rjmp	.-22     	; 0x9b2 <vfprintf+0x3a6>
 9c8:	22 20       	and	r2, r2
 9ca:	09 f4       	brne	.+2      	; 0x9ce <vfprintf+0x3c2>
 9cc:	42 ce       	rjmp	.-892    	; 0x652 <vfprintf+0x46>
 9ce:	b6 01       	movw	r22, r12
 9d0:	80 e2       	ldi	r24, 0x20	; 32
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9d8:	2a 94       	dec	r2
 9da:	f6 cf       	rjmp	.-20     	; 0x9c8 <vfprintf+0x3bc>
 9dc:	f6 01       	movw	r30, r12
 9de:	86 81       	ldd	r24, Z+6	; 0x06
 9e0:	97 81       	ldd	r25, Z+7	; 0x07
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <vfprintf+0x3dc>
 9e4:	8f ef       	ldi	r24, 0xFF	; 255
 9e6:	9f ef       	ldi	r25, 0xFF	; 255
 9e8:	2b 96       	adiw	r28, 0x0b	; 11
 9ea:	cd bf       	out	0x3d, r28	; 61
 9ec:	de bf       	out	0x3e, r29	; 62
 9ee:	df 91       	pop	r29
 9f0:	cf 91       	pop	r28
 9f2:	1f 91       	pop	r17
 9f4:	0f 91       	pop	r16
 9f6:	ff 90       	pop	r15
 9f8:	ef 90       	pop	r14
 9fa:	df 90       	pop	r13
 9fc:	cf 90       	pop	r12
 9fe:	bf 90       	pop	r11
 a00:	af 90       	pop	r10
 a02:	9f 90       	pop	r9
 a04:	8f 90       	pop	r8
 a06:	7f 90       	pop	r7
 a08:	6f 90       	pop	r6
 a0a:	5f 90       	pop	r5
 a0c:	4f 90       	pop	r4
 a0e:	3f 90       	pop	r3
 a10:	2f 90       	pop	r2
 a12:	08 95       	ret

00000a14 <strnlen_P>:
 a14:	fc 01       	movw	r30, r24
 a16:	05 90       	lpm	r0, Z+
 a18:	61 50       	subi	r22, 0x01	; 1
 a1a:	70 40       	sbci	r23, 0x00	; 0
 a1c:	01 10       	cpse	r0, r1
 a1e:	d8 f7       	brcc	.-10     	; 0xa16 <strnlen_P+0x2>
 a20:	80 95       	com	r24
 a22:	90 95       	com	r25
 a24:	8e 0f       	add	r24, r30
 a26:	9f 1f       	adc	r25, r31
 a28:	08 95       	ret

00000a2a <strnlen>:
 a2a:	fc 01       	movw	r30, r24
 a2c:	61 50       	subi	r22, 0x01	; 1
 a2e:	70 40       	sbci	r23, 0x00	; 0
 a30:	01 90       	ld	r0, Z+
 a32:	01 10       	cpse	r0, r1
 a34:	d8 f7       	brcc	.-10     	; 0xa2c <strnlen+0x2>
 a36:	80 95       	com	r24
 a38:	90 95       	com	r25
 a3a:	8e 0f       	add	r24, r30
 a3c:	9f 1f       	adc	r25, r31
 a3e:	08 95       	ret

00000a40 <fputc>:
 a40:	0f 93       	push	r16
 a42:	1f 93       	push	r17
 a44:	cf 93       	push	r28
 a46:	df 93       	push	r29
 a48:	fb 01       	movw	r30, r22
 a4a:	23 81       	ldd	r18, Z+3	; 0x03
 a4c:	21 fd       	sbrc	r18, 1
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <fputc+0x16>
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	2c c0       	rjmp	.+88     	; 0xaae <fputc+0x6e>
 a56:	22 ff       	sbrs	r18, 2
 a58:	16 c0       	rjmp	.+44     	; 0xa86 <fputc+0x46>
 a5a:	46 81       	ldd	r20, Z+6	; 0x06
 a5c:	57 81       	ldd	r21, Z+7	; 0x07
 a5e:	24 81       	ldd	r18, Z+4	; 0x04
 a60:	35 81       	ldd	r19, Z+5	; 0x05
 a62:	42 17       	cp	r20, r18
 a64:	53 07       	cpc	r21, r19
 a66:	44 f4       	brge	.+16     	; 0xa78 <fputc+0x38>
 a68:	a0 81       	ld	r26, Z
 a6a:	b1 81       	ldd	r27, Z+1	; 0x01
 a6c:	9d 01       	movw	r18, r26
 a6e:	2f 5f       	subi	r18, 0xFF	; 255
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	20 83       	st	Z, r18
 a74:	31 83       	std	Z+1, r19	; 0x01
 a76:	8c 93       	st	X, r24
 a78:	26 81       	ldd	r18, Z+6	; 0x06
 a7a:	37 81       	ldd	r19, Z+7	; 0x07
 a7c:	2f 5f       	subi	r18, 0xFF	; 255
 a7e:	3f 4f       	sbci	r19, 0xFF	; 255
 a80:	26 83       	std	Z+6, r18	; 0x06
 a82:	37 83       	std	Z+7, r19	; 0x07
 a84:	14 c0       	rjmp	.+40     	; 0xaae <fputc+0x6e>
 a86:	8b 01       	movw	r16, r22
 a88:	ec 01       	movw	r28, r24
 a8a:	fb 01       	movw	r30, r22
 a8c:	00 84       	ldd	r0, Z+8	; 0x08
 a8e:	f1 85       	ldd	r31, Z+9	; 0x09
 a90:	e0 2d       	mov	r30, r0
 a92:	09 95       	icall
 a94:	89 2b       	or	r24, r25
 a96:	e1 f6       	brne	.-72     	; 0xa50 <fputc+0x10>
 a98:	d8 01       	movw	r26, r16
 a9a:	16 96       	adiw	r26, 0x06	; 6
 a9c:	8d 91       	ld	r24, X+
 a9e:	9c 91       	ld	r25, X
 aa0:	17 97       	sbiw	r26, 0x07	; 7
 aa2:	01 96       	adiw	r24, 0x01	; 1
 aa4:	16 96       	adiw	r26, 0x06	; 6
 aa6:	8d 93       	st	X+, r24
 aa8:	9c 93       	st	X, r25
 aaa:	17 97       	sbiw	r26, 0x07	; 7
 aac:	ce 01       	movw	r24, r28
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	08 95       	ret

00000ab8 <__ultoa_invert>:
 ab8:	fa 01       	movw	r30, r20
 aba:	aa 27       	eor	r26, r26
 abc:	28 30       	cpi	r18, 0x08	; 8
 abe:	51 f1       	breq	.+84     	; 0xb14 <__ultoa_invert+0x5c>
 ac0:	20 31       	cpi	r18, 0x10	; 16
 ac2:	81 f1       	breq	.+96     	; 0xb24 <__ultoa_invert+0x6c>
 ac4:	e8 94       	clt
 ac6:	6f 93       	push	r22
 ac8:	6e 7f       	andi	r22, 0xFE	; 254
 aca:	6e 5f       	subi	r22, 0xFE	; 254
 acc:	7f 4f       	sbci	r23, 0xFF	; 255
 ace:	8f 4f       	sbci	r24, 0xFF	; 255
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	af 4f       	sbci	r26, 0xFF	; 255
 ad4:	b1 e0       	ldi	r27, 0x01	; 1
 ad6:	3e d0       	rcall	.+124    	; 0xb54 <__ultoa_invert+0x9c>
 ad8:	b4 e0       	ldi	r27, 0x04	; 4
 ada:	3c d0       	rcall	.+120    	; 0xb54 <__ultoa_invert+0x9c>
 adc:	67 0f       	add	r22, r23
 ade:	78 1f       	adc	r23, r24
 ae0:	89 1f       	adc	r24, r25
 ae2:	9a 1f       	adc	r25, r26
 ae4:	a1 1d       	adc	r26, r1
 ae6:	68 0f       	add	r22, r24
 ae8:	79 1f       	adc	r23, r25
 aea:	8a 1f       	adc	r24, r26
 aec:	91 1d       	adc	r25, r1
 aee:	a1 1d       	adc	r26, r1
 af0:	6a 0f       	add	r22, r26
 af2:	71 1d       	adc	r23, r1
 af4:	81 1d       	adc	r24, r1
 af6:	91 1d       	adc	r25, r1
 af8:	a1 1d       	adc	r26, r1
 afa:	20 d0       	rcall	.+64     	; 0xb3c <__ultoa_invert+0x84>
 afc:	09 f4       	brne	.+2      	; 0xb00 <__ultoa_invert+0x48>
 afe:	68 94       	set
 b00:	3f 91       	pop	r19
 b02:	2a e0       	ldi	r18, 0x0A	; 10
 b04:	26 9f       	mul	r18, r22
 b06:	11 24       	eor	r1, r1
 b08:	30 19       	sub	r19, r0
 b0a:	30 5d       	subi	r19, 0xD0	; 208
 b0c:	31 93       	st	Z+, r19
 b0e:	de f6       	brtc	.-74     	; 0xac6 <__ultoa_invert+0xe>
 b10:	cf 01       	movw	r24, r30
 b12:	08 95       	ret
 b14:	46 2f       	mov	r20, r22
 b16:	47 70       	andi	r20, 0x07	; 7
 b18:	40 5d       	subi	r20, 0xD0	; 208
 b1a:	41 93       	st	Z+, r20
 b1c:	b3 e0       	ldi	r27, 0x03	; 3
 b1e:	0f d0       	rcall	.+30     	; 0xb3e <__ultoa_invert+0x86>
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__ultoa_invert+0x5c>
 b22:	f6 cf       	rjmp	.-20     	; 0xb10 <__ultoa_invert+0x58>
 b24:	46 2f       	mov	r20, r22
 b26:	4f 70       	andi	r20, 0x0F	; 15
 b28:	40 5d       	subi	r20, 0xD0	; 208
 b2a:	4a 33       	cpi	r20, 0x3A	; 58
 b2c:	18 f0       	brcs	.+6      	; 0xb34 <__ultoa_invert+0x7c>
 b2e:	49 5d       	subi	r20, 0xD9	; 217
 b30:	31 fd       	sbrc	r19, 1
 b32:	40 52       	subi	r20, 0x20	; 32
 b34:	41 93       	st	Z+, r20
 b36:	02 d0       	rcall	.+4      	; 0xb3c <__ultoa_invert+0x84>
 b38:	a9 f7       	brne	.-22     	; 0xb24 <__ultoa_invert+0x6c>
 b3a:	ea cf       	rjmp	.-44     	; 0xb10 <__ultoa_invert+0x58>
 b3c:	b4 e0       	ldi	r27, 0x04	; 4
 b3e:	a6 95       	lsr	r26
 b40:	97 95       	ror	r25
 b42:	87 95       	ror	r24
 b44:	77 95       	ror	r23
 b46:	67 95       	ror	r22
 b48:	ba 95       	dec	r27
 b4a:	c9 f7       	brne	.-14     	; 0xb3e <__ultoa_invert+0x86>
 b4c:	00 97       	sbiw	r24, 0x00	; 0
 b4e:	61 05       	cpc	r22, r1
 b50:	71 05       	cpc	r23, r1
 b52:	08 95       	ret
 b54:	9b 01       	movw	r18, r22
 b56:	ac 01       	movw	r20, r24
 b58:	0a 2e       	mov	r0, r26
 b5a:	06 94       	lsr	r0
 b5c:	57 95       	ror	r21
 b5e:	47 95       	ror	r20
 b60:	37 95       	ror	r19
 b62:	27 95       	ror	r18
 b64:	ba 95       	dec	r27
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__ultoa_invert+0xa2>
 b68:	62 0f       	add	r22, r18
 b6a:	73 1f       	adc	r23, r19
 b6c:	84 1f       	adc	r24, r20
 b6e:	95 1f       	adc	r25, r21
 b70:	a0 1d       	adc	r26, r0
 b72:	08 95       	ret

00000b74 <_exit>:
 b74:	f8 94       	cli

00000b76 <__stop_program>:
 b76:	ff cf       	rjmp	.-2      	; 0xb76 <__stop_program>
